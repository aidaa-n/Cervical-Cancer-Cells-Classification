{"cells":[{"cell_type":"markdown","metadata":{"id":"0uR9Hp4G1fdI"},"source":["Import Library"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HU19gMal1MK6","outputId":"bf76e636-55a2-402f-d569-25221a07b4d5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras\n","  Downloading keras-3.4.1-py3-none-any.whl.metadata (5.8 kB)\n","Collecting absl-py (from keras)\n","  Downloading absl_py-2.1.0-py3-none-any.whl.metadata (2.3 kB)\n","Collecting numpy (from keras)\n","  Downloading numpy-2.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (60 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m60.9/60.9 kB\u001b[0m \u001b[31m1.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting rich (from keras)\n","  Downloading rich-13.7.1-py3-none-any.whl.metadata (18 kB)\n","Collecting namex (from keras)\n","  Downloading namex-0.0.8-py3-none-any.whl.metadata (246 bytes)\n","Collecting h5py (from keras)\n","  Downloading h5py-3.11.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.5 kB)\n","Collecting optree (from keras)\n","  Downloading optree-0.12.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (47 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m47.8/47.8 kB\u001b[0m \u001b[31m1.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting ml-dtypes (from keras)\n","  Downloading ml_dtypes-0.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (20 kB)\n","Collecting packaging (from keras)\n","  Using cached packaging-24.1-py3-none-any.whl.metadata (3.2 kB)\n","Collecting typing-extensions>=4.5.0 (from optree->keras)\n","  Downloading typing_extensions-4.12.2-py3-none-any.whl.metadata (3.0 kB)\n","Collecting markdown-it-py>=2.2.0 (from rich->keras)\n","  Downloading markdown_it_py-3.0.0-py3-none-any.whl.metadata (6.9 kB)\n","Collecting pygments<3.0.0,>=2.13.0 (from rich->keras)\n","  Downloading pygments-2.18.0-py3-none-any.whl.metadata (2.5 kB)\n","Collecting mdurl~=0.1 (from markdown-it-py>=2.2.0->rich->keras)\n","  Downloading mdurl-0.1.2-py3-none-any.whl.metadata (1.6 kB)\n","Downloading keras-3.4.1-py3-none-any.whl (1.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m19.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading absl_py-2.1.0-py3-none-any.whl (133 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m133.7/133.7 kB\u001b[0m \u001b[31m8.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading h5py-3.11.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.3 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.3/5.3 MB\u001b[0m \u001b[31m31.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading numpy-2.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (19.5 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m19.5/19.5 MB\u001b[0m \u001b[31m35.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading ml_dtypes-0.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m57.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading namex-0.0.8-py3-none-any.whl (5.8 kB)\n","Downloading optree-0.12.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (347 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m347.7/347.7 kB\u001b[0m \u001b[31m22.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hUsing cached packaging-24.1-py3-none-any.whl (53 kB)\n","Downloading rich-13.7.1-py3-none-any.whl (240 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m240.7/240.7 kB\u001b[0m \u001b[31m13.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading markdown_it_py-3.0.0-py3-none-any.whl (87 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m87.5/87.5 kB\u001b[0m \u001b[31m7.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading pygments-2.18.0-py3-none-any.whl (1.2 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m37.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading typing_extensions-4.12.2-py3-none-any.whl (37 kB)\n","Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)\n","Installing collected packages: namex, typing-extensions, pygments, packaging, numpy, mdurl, absl-py, optree, ml-dtypes, markdown-it-py, h5py, rich, keras\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","ipython 7.34.0 requires jedi>=0.16, which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cublas-cu12==12.1.3.1; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cuda-cupti-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cuda-nvrtc-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cuda-runtime-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cudnn-cu12==8.9.2.26; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cufft-cu12==11.0.2.54; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-curand-cu12==10.3.2.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cusolver-cu12==11.4.5.107; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cusparse-cu12==12.1.0.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-nccl-cu12==2.20.5; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-nvtx-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","accelerate 0.32.1 requires numpy<2.0.0,>=1.17, but you have numpy 2.0.1 which is incompatible.\n","astropy 5.3.4 requires numpy<2,>=1.21, but you have numpy 2.0.1 which is incompatible.\n","cudf-cu12 24.4.1 requires numpy<2.0a0,>=1.23, but you have numpy 2.0.1 which is incompatible.\n","cupy-cuda12x 12.2.0 requires numpy<1.27,>=1.20, but you have numpy 2.0.1 which is incompatible.\n","gensim 4.3.3 requires numpy<2.0,>=1.18.5, but you have numpy 2.0.1 which is incompatible.\n","ibis-framework 8.0.0 requires numpy<2,>=1, but you have numpy 2.0.1 which is incompatible.\n","numba 0.58.1 requires numpy<1.27,>=1.22, but you have numpy 2.0.1 which is incompatible.\n","rmm-cu12 24.4.0 requires numpy<2.0a0,>=1.23, but you have numpy 2.0.1 which is incompatible.\n","scipy 1.11.4 requires numpy<1.28.0,>=1.21.6, but you have numpy 2.0.1 which is incompatible.\n","tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.4.1 which is incompatible.\n","tensorflow 2.15.0 requires ml-dtypes~=0.2.0, but you have ml-dtypes 0.4.0 which is incompatible.\n","tensorflow 2.15.0 requires numpy<2.0.0,>=1.23.5, but you have numpy 2.0.1 which is incompatible.\n","thinc 8.2.5 requires numpy<2.0.0,>=1.19.0; python_version >= \"3.9\", but you have numpy 2.0.1 which is incompatible.\n","transformers 4.42.4 requires numpy<2.0,>=1.17, but you have numpy 2.0.1 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed absl-py-2.1.0 h5py-3.11.0 keras-3.4.1 markdown-it-py-3.0.0 mdurl-0.1.2 ml-dtypes-0.4.0 namex-0.0.8 numpy-2.0.1 optree-0.12.1 packaging-24.1 pygments-2.18.0 rich-13.7.1 typing-extensions-4.12.2\n"]}],"source":["!pip install keras -tuner"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m19PImr3163V","outputId":"805e497e-9d14-4483-a7ce-b6caf62cb4a6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras_tuner\n","  Downloading keras_tuner-1.4.7-py3-none-any.whl.metadata (5.4 kB)\n","Requirement already satisfied: keras in /usr/local/lib/python3.10/dist-packages (from keras_tuner) (2.15.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from keras_tuner) (24.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from keras_tuner) (2.31.0)\n","Collecting kt-legacy (from keras_tuner)\n","  Downloading kt_legacy-1.0.5-py3-none-any.whl.metadata (221 bytes)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (2024.7.4)\n","Downloading keras_tuner-1.4.7-py3-none-any.whl (129 kB)\n","\u001b[?25l   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/129.1 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m129.1/129.1 kB\u001b[0m \u001b[31m3.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading kt_legacy-1.0.5-py3-none-any.whl (9.6 kB)\n","Installing collected packages: kt-legacy, keras_tuner\n","Successfully installed keras_tuner-1.4.7 kt-legacy-1.0.5\n"]}],"source":["!pip install keras_tuner"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"1EZIku2w2CXq"},"outputs":[],"source":["import cv2\n","import datetime\n","import os\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import tensorflow_hub as hub\n","\n","from sklearn.utils import shuffle\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, recall_score\n","\n","from tensorflow.keras import backend as K\n","from tensorflow.keras import layers\n","from tensorflow.keras import Model, Sequential\n","from tensorflow.keras.utils import plot_model\n","from tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint, EarlyStopping\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","#utility & processing\n","from tensorflow.keras import utils\n","from tensorflow.keras.utils import to_categorical\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras import regularizers\n","\n","#callbacks\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","\n","#data augmentation\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","\n","#keras tuner\n","import keras_tuner\n","from keras_tuner import RandomSearch\n","from keras_tuner.engine.hyperparameters import HyperParameters\n","\n","#warnings\n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GQv_GLie2WJP","outputId":"375ff1b7-ef70-43d3-93e7-c12911a16458"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting tensorflow-addons\n","  Downloading tensorflow_addons-0.23.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (1.8 kB)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow-addons) (24.1)\n","Collecting typeguard<3.0.0,>=2.7 (from tensorflow-addons)\n","  Downloading typeguard-2.13.3-py3-none-any.whl.metadata (3.6 kB)\n","Downloading tensorflow_addons-0.23.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (611 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m611.8/611.8 kB\u001b[0m \u001b[31m13.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading typeguard-2.13.3-py3-none-any.whl (17 kB)\n","Installing collected packages: typeguard, tensorflow-addons\n","Successfully installed tensorflow-addons-0.23.0 typeguard-2.13.3\n"]}],"source":["!pip install tensorflow-addons\n","import tensorflow_addons as tfa"]},{"cell_type":"markdown","metadata":{"id":"MLMD1rBr2hxs"},"source":["Download dan Unzip Dataset"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B9mYQSSn2bj-","outputId":"2025dfea-49c2-4772-db5d-1ffb7efeb787"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading...\n","From (original): https://drive.google.com/uc?id=1Z80TFKr-LYCl4O5fZLxS-TtAJWfZlto_\n","From (redirected): https://drive.google.com/uc?id=1Z80TFKr-LYCl4O5fZLxS-TtAJWfZlto_&confirm=t&uuid=a3c9f054-46e2-4077-9ba5-e35f3de8e5ca\n","To: /content/herlev.zip\n","100% 42.6M/42.6M [00:00<00:00, 71.3MB/s]\n"]}],"source":["# https://drive.google.com/file/d/1Z80TFKr-LYCl4O5fZLxS-TtAJWfZlto_/view?usp=drive_link\n","!gdown 1Z80TFKr-LYCl4O5fZLxS-TtAJWfZlto_"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"R4gs6hKv24yv"},"outputs":[],"source":["#unzip dataset\n","%%capture\n","!unzip herlev.zip;"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IDJgkcFH4IpC","outputId":"8868a318-dd8f-43cc-c9c6-b84fbbd24053"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ge_ixJHj4dSS","outputId":"42a22500-3085-4723-9aa8-6f8c2e293a00"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/herlev\n","/content/herlev/normal_columnar\n","/content/herlev/normal_superficiel\n","/content/herlev/normal_intermediate\n","/content/herlev/severe_dysplastic\n","/content/herlev/moderate_dysplastic\n","/content/herlev/light_dysplastic\n","/content/herlev/carcinoma_in_situ\n"]}],"source":["for dirname, _, filenames in os.walk('/content/herlev'):\n","    print(dirname)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_zrGYDm-7Z94","outputId":"2185c6be-3d06-4f2c-ebc6-1c2ab4e5d740"},"outputs":[{"output_type":"stream","name":"stdout","text":["917\n"]},{"output_type":"execute_result","data":{"text/plain":["['/content/herlev/normal_superficiel/153958345-153958392-001.BMP',\n"," '/content/herlev/normal_superficiel/157184112-157184128-001.BMP',\n"," '/content/herlev/normal_superficiel/157224297-157224320-002.BMP']"]},"metadata":{},"execution_count":9}],"source":["filenames = tf.io.gfile.glob('/content/herlev/*/*')\n","print(len(filenames))\n","filenames[:3]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":579},"id":"qRoC_07L7hT5","outputId":"2c524a2f-2ae8-4f75-e3ba-8ec12603d09c"},"outputs":[{"output_type":"stream","name":"stdout","text":["class\n","severe_dysplastic      197\n","light_dysplastic       182\n","carcinoma_in_situ      150\n","moderate_dysplastic    146\n","normal_columnar         98\n","normal_superficiel      74\n","normal_intermediate     70\n","Name: count, dtype: int64\n"]},{"output_type":"execute_result","data":{"text/plain":["                                              filename               class\n","0    /content/herlev/normal_superficiel/153958345-1...  normal_superficiel\n","1    /content/herlev/normal_superficiel/157184112-1...  normal_superficiel\n","2    /content/herlev/normal_superficiel/157224297-1...  normal_superficiel\n","3    /content/herlev/normal_superficiel/157223659-1...  normal_superficiel\n","4    /content/herlev/normal_superficiel/209047342-2...  normal_superficiel\n","..                                                 ...                 ...\n","912  /content/herlev/light_dysplastic/148499383-148...    light_dysplastic\n","913  /content/herlev/light_dysplastic/148497676-148...    light_dysplastic\n","914  /content/herlev/light_dysplastic/148881870-148...    light_dysplastic\n","915  /content/herlev/light_dysplastic/148503400-148...    light_dysplastic\n","916  /content/herlev/light_dysplastic/153829664-153...    light_dysplastic\n","\n","[917 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-710e54c2-d379-48c0-8574-0f98aa25352a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>filename</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/herlev/normal_superficiel/153958345-1...</td>\n","      <td>normal_superficiel</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/herlev/normal_superficiel/157184112-1...</td>\n","      <td>normal_superficiel</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/herlev/normal_superficiel/157224297-1...</td>\n","      <td>normal_superficiel</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/herlev/normal_superficiel/157223659-1...</td>\n","      <td>normal_superficiel</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/herlev/normal_superficiel/209047342-2...</td>\n","      <td>normal_superficiel</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>912</th>\n","      <td>/content/herlev/light_dysplastic/148499383-148...</td>\n","      <td>light_dysplastic</td>\n","    </tr>\n","    <tr>\n","      <th>913</th>\n","      <td>/content/herlev/light_dysplastic/148497676-148...</td>\n","      <td>light_dysplastic</td>\n","    </tr>\n","    <tr>\n","      <th>914</th>\n","      <td>/content/herlev/light_dysplastic/148881870-148...</td>\n","      <td>light_dysplastic</td>\n","    </tr>\n","    <tr>\n","      <th>915</th>\n","      <td>/content/herlev/light_dysplastic/148503400-148...</td>\n","      <td>light_dysplastic</td>\n","    </tr>\n","    <tr>\n","      <th>916</th>\n","      <td>/content/herlev/light_dysplastic/153829664-153...</td>\n","      <td>light_dysplastic</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>917 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-710e54c2-d379-48c0-8574-0f98aa25352a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-710e54c2-d379-48c0-8574-0f98aa25352a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-710e54c2-d379-48c0-8574-0f98aa25352a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b0cb91a8-3377-4e01-b73a-780bfce1881b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b0cb91a8-3377-4e01-b73a-780bfce1881b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b0cb91a8-3377-4e01-b73a-780bfce1881b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f7be633e-ab43-456c-92b0-160914fc542c\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f7be633e-ab43-456c-92b0-160914fc542c button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 917,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 917,\n        \"samples\": [\n          \"/content/herlev/moderate_dysplastic/149096505-149096567-001.BMP\",\n          \"/content/herlev/normal_superficiel/157183332-157183376-001.BMP\",\n          \"/content/herlev/severe_dysplastic/149101894-149101930-002.BMP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"normal_superficiel\",\n          \"normal_columnar\",\n          \"light_dysplastic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}],"source":["data = pd.DataFrame()\n","for el in range(0, len(filenames)):\n","    target = filenames[el].split('/')[-2]\n","    path = filenames[el]\n","\n","    data.loc[el, 'filename'] = path\n","    data.loc[el, 'class'] = target\n","\n","print(data['class'].value_counts(dropna=False))\n","data"]},{"cell_type":"markdown","metadata":{"id":"Y9FEO3F79oqp"},"source":["Mengacak Data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"83V-80-w7uyc","outputId":"cd8d2220-5ef6-4e61-e28e-808c91f304fe"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              filename                class\n","0    /content/herlev/moderate_dysplastic/149096505-...  moderate_dysplastic\n","1    /content/herlev/normal_superficiel/157183332-1...   normal_superficiel\n","2    /content/herlev/severe_dysplastic/149101894-14...    severe_dysplastic\n","3    /content/herlev/carcinoma_in_situ/149182657-14...    carcinoma_in_situ\n","4    /content/herlev/light_dysplastic/148883996-148...     light_dysplastic\n","..                                                 ...                  ...\n","912  /content/herlev/normal_columnar/153956444-1539...      normal_columnar\n","913  /content/herlev/severe_dysplastic/149096854-14...    severe_dysplastic\n","914  /content/herlev/light_dysplastic/148497788-148...     light_dysplastic\n","915  /content/herlev/severe_dysplastic/153829063-15...    severe_dysplastic\n","916  /content/herlev/normal_columnar/153958547-1539...      normal_columnar\n","\n","[917 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-89000194-35c1-4e26-961e-7264eb77ade6\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>filename</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/herlev/moderate_dysplastic/149096505-...</td>\n","      <td>moderate_dysplastic</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/herlev/normal_superficiel/157183332-1...</td>\n","      <td>normal_superficiel</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/herlev/severe_dysplastic/149101894-14...</td>\n","      <td>severe_dysplastic</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/herlev/carcinoma_in_situ/149182657-14...</td>\n","      <td>carcinoma_in_situ</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/herlev/light_dysplastic/148883996-148...</td>\n","      <td>light_dysplastic</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>912</th>\n","      <td>/content/herlev/normal_columnar/153956444-1539...</td>\n","      <td>normal_columnar</td>\n","    </tr>\n","    <tr>\n","      <th>913</th>\n","      <td>/content/herlev/severe_dysplastic/149096854-14...</td>\n","      <td>severe_dysplastic</td>\n","    </tr>\n","    <tr>\n","      <th>914</th>\n","      <td>/content/herlev/light_dysplastic/148497788-148...</td>\n","      <td>light_dysplastic</td>\n","    </tr>\n","    <tr>\n","      <th>915</th>\n","      <td>/content/herlev/severe_dysplastic/153829063-15...</td>\n","      <td>severe_dysplastic</td>\n","    </tr>\n","    <tr>\n","      <th>916</th>\n","      <td>/content/herlev/normal_columnar/153958547-1539...</td>\n","      <td>normal_columnar</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>917 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-89000194-35c1-4e26-961e-7264eb77ade6')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-89000194-35c1-4e26-961e-7264eb77ade6 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-89000194-35c1-4e26-961e-7264eb77ade6');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-11d0358f-1e73-4fe7-b384-3537528236d7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-11d0358f-1e73-4fe7-b384-3537528236d7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-11d0358f-1e73-4fe7-b384-3537528236d7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_36ea7fde-3466-4f58-862d-962895ccfb5e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_36ea7fde-3466-4f58-862d-962895ccfb5e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 917,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 917,\n        \"samples\": [\n          \"/content/herlev/normal_intermediate/157183332-157183388-002.BMP\",\n          \"/content/herlev/normal_superficiel/157185164-157185177-001.BMP\",\n          \"/content/herlev/carcinoma_in_situ/149317114-149317152-002.BMP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"moderate_dysplastic\",\n          \"normal_superficiel\",\n          \"normal_columnar\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}],"source":["data = shuffle(data, random_state=42)\n","data.reset_index(drop=True, inplace=True)\n","data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"Wii1j03_71F9","outputId":"4984875a-d58e-44db-fe94-13eeb285a47d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              filename class\n","0    /content/herlev/moderate_dysplastic/149096505-...     3\n","1    /content/herlev/normal_superficiel/157183332-1...     5\n","2    /content/herlev/severe_dysplastic/149101894-14...     0\n","3    /content/herlev/carcinoma_in_situ/149182657-14...     2\n","4    /content/herlev/light_dysplastic/148883996-148...     1\n","..                                                 ...   ...\n","912  /content/herlev/normal_columnar/153956444-1539...     4\n","913  /content/herlev/severe_dysplastic/149096854-14...     0\n","914  /content/herlev/light_dysplastic/148497788-148...     1\n","915  /content/herlev/severe_dysplastic/153829063-15...     0\n","916  /content/herlev/normal_columnar/153958547-1539...     4\n","\n","[917 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-6c74e1b3-3b3d-4fa9-89ce-ae896c63e056\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>filename</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/herlev/moderate_dysplastic/149096505-...</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/herlev/normal_superficiel/157183332-1...</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/herlev/severe_dysplastic/149101894-14...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/herlev/carcinoma_in_situ/149182657-14...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/herlev/light_dysplastic/148883996-148...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>912</th>\n","      <td>/content/herlev/normal_columnar/153956444-1539...</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>913</th>\n","      <td>/content/herlev/severe_dysplastic/149096854-14...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>914</th>\n","      <td>/content/herlev/light_dysplastic/148497788-148...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>915</th>\n","      <td>/content/herlev/severe_dysplastic/153829063-15...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>916</th>\n","      <td>/content/herlev/normal_columnar/153958547-1539...</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>917 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c74e1b3-3b3d-4fa9-89ce-ae896c63e056')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6c74e1b3-3b3d-4fa9-89ce-ae896c63e056 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6c74e1b3-3b3d-4fa9-89ce-ae896c63e056');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-07f9f9c0-83b7-4b67-97cb-6a764daa5f1a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-07f9f9c0-83b7-4b67-97cb-6a764daa5f1a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-07f9f9c0-83b7-4b67-97cb-6a764daa5f1a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_102a44e5-9cec-4edd-b10c-ed83fc6e4450\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_102a44e5-9cec-4edd-b10c-ed83fc6e4450 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 917,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 917,\n        \"samples\": [\n          \"/content/herlev/normal_intermediate/157183332-157183388-002.BMP\",\n          \"/content/herlev/normal_superficiel/157185164-157185177-001.BMP\",\n          \"/content/herlev/carcinoma_in_situ/149317114-149317152-002.BMP\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 7,\n        \"samples\": [\n          \"3\",\n          \"5\",\n          \"4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}],"source":["change = {\n","'severe_dysplastic' : '0',\n","'light_dysplastic': '1',\n","'carcinoma_in_situ' : '2',\n","'moderate_dysplastic' : '3',\n","'normal_columnar' : '4',\n","'normal_superficiel' : '5',\n","'normal_intermediate' : '6',\n","}\n","\n","data['class'] = data['class'].map(change)\n","data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pUCYXEOl9upI","outputId":"e658978a-6831-4832-8e57-87d3c2b39e34"},"outputs":[{"output_type":"stream","name":"stdout","text":["(917, 2)\n","(917, 2)\n"]}],"source":["indexes=[]\n","\n","def func(x):\n","    if x[-4:] != '.BMP':\n","        idx = data[data['filename'] == x].index\n","        indexes.append(idx[0])\n","        print(idx[0], x)\n","    return x\n","\n","data['filename'].map(func)\n","\n","print(data.shape)\n","data.drop(index=indexes, axis=0, inplace=True)\n","data.reset_index(drop=True, inplace=True)\n","print(data.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6AkWI9y09zEU","outputId":"a9aeacc2-4085-4e56-cc17-a970f0f37a61"},"outputs":[{"output_type":"stream","name":"stdout","text":["(109, 88, 3)\n","(54, 86, 3)\n","(60, 65, 3)\n","(161, 201, 3)\n","(102, 97, 3)\n","(81, 136, 3)\n","(286, 291, 3)\n","(141, 235, 3)\n","(70, 97, 3)\n","(64, 103, 3)\n","(221, 241, 3)\n","(81, 47, 3)\n","(103, 102, 3)\n","(61, 71, 3)\n","(230, 335, 3)\n","(95, 168, 3)\n","(131, 86, 3)\n","(166, 153, 3)\n","(71, 78, 3)\n","(174, 251, 3)\n"]}],"source":["for el in range(100, 120):\n","    path = data.loc[el, 'filename']\n","    img  = cv2.imread(path)\n","    print(img.shape)"]},{"cell_type":"markdown","metadata":{"id":"Va6jjHdT-BoR"},"source":["Membagi Dataset"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qrfnHes4P6cE","outputId":"09488003-b4cf-4859-e771-b7e39a3667be"},"outputs":[{"output_type":"stream","name":"stdout","text":["class\n","0    157\n","1    146\n","2    120\n","3    117\n","4     78\n","5     59\n","6     56\n","Name: count, dtype: int64\n","class\n","0    40\n","1    36\n","2    30\n","3    29\n","4    20\n","5    15\n","6    14\n","Name: count, dtype: int64\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","\n","# Menghapus baris dengan nilai NaN pada kolom 'class'\n","data_cleaned = data.dropna(subset=['class'])\n","\n","# Melakukan split data menjadi train dan test set\n","train_data, test_data = train_test_split(data_cleaned, test_size=0.2, random_state=42, stratify=data_cleaned['class'])\n","\n","print(train_data['class'].value_counts(dropna=False))\n","print(test_data['class'].value_counts(dropna=False))\n"]},{"cell_type":"markdown","metadata":{"id":"PJoHLBwA_fsw"},"source":["Augmentasi Data"]},{"cell_type":"code","source":["BATCH_SIZE = 32\n","EPOCHS = 50\n","IM_HEIGHT = 224\n","IM_WIDTH = 224\n","\n","AUTOTUNE = tf.data.experimental.AUTOTUNE\n","\n","tf.random.set_seed(999)"],"metadata":{"id":"iccT3qck6cxW"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nNHZizHB-Jpb","outputId":"111e8272-aff8-4131-a2cb-55ee85b94326"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 733 validated image filenames belonging to 7 classes.\n","Found 184 validated image filenames belonging to 7 classes.\n"]}],"source":["train_datagen = ImageDataGenerator(rescale=1./255,\n","                                    rotation_range=40,\n","                                    width_shift_range=0.2,\n","                                    height_shift_range=0.2,\n","                                    horizontal_flip=True,\n","                                    fill_mode='nearest')\n","\n","train_generator = train_datagen.flow_from_dataframe(\n","                  train_data,\n","                  x_col=\"filename\",\n","                  y_col=\"class\",\n","                  target_size=(IM_HEIGHT, IM_WIDTH),\n","                  class_mode='categorical',\n","                  batch_size= BATCH_SIZE,\n","                  color_mode='rgb',\n","                  shuffle=True,\n","                  num_parallel_calls=AUTOTUNE)\n","\n","test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","test_generator = test_datagen.flow_from_dataframe(\n","                 test_data,\n","                 x_col=\"filename\",\n","                 y_col=\"class\",\n","                 target_size=(IM_HEIGHT, IM_WIDTH),\n","                 class_mode='categorical',\n","                 batch_size= BATCH_SIZE,\n","                 color_mode='rgb',\n","                 shuffle=False,\n","                 num_parallel_calls=AUTOTUNE)"]},{"cell_type":"markdown","metadata":{"id":"Wm7I7_iZA3FL"},"source":["Arsitektur Model"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"APoY5JySAZ_H","outputId":"d0f2b6b6-e523-4cd2-8012-e821f9b9743f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," keras_layer (KerasLayer)    (None, 1000)              21612360  \n","                                                                 \n"," dense (Dense)               (None, 512)               512512    \n","                                                                 \n"," dense_1 (Dense)             (None, 7)                 3591      \n","                                                                 \n","=================================================================\n","Total params: 22128463 (84.41 MB)\n","Trainable params: 516103 (1.97 MB)\n","Non-trainable params: 21612360 (82.44 MB)\n","_________________________________________________________________\n"]}],"source":["# Menggunakan URL model EfficientNetV2 dari TensorFlow Hub\n","efficientnet_url = \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet1k_s/classification/2\"\n","\n","# Membuat model menggunakan EfficientNetV2 dari TensorFlow Hub\n","trf_lr_efficientnet_model = tf.keras.Sequential([\n","    hub.KerasLayer(efficientnet_url, trainable=False),\n","    tf.keras.layers.Dense(512, activation='relu'),\n","    tf.keras.layers.Dense(7, activation='softmax')\n","])\n","trf_lr_efficientnet_model.build([None, IM_HEIGHT, IM_WIDTH, 3])\n","\n","# Mengompilasi model\n","\n","trf_lr_efficientnet_model.compile(\n","    optimizer='adam',\n","    loss='categorical_crossentropy',\n","    metrics='accuracy'\n",")\n","trf_lr_efficientnet_model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lRG13pouBLlp","outputId":"e52355cc-1a6e-4283-ad54-728f5a5f4147"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","22/22 [==============================] - 34s 569ms/step - loss: 1.7781 - accuracy: 0.4037 - val_loss: 1.3448 - val_accuracy: 0.5375 - lr: 0.0010\n","Epoch 2/50\n","22/22 [==============================] - 10s 454ms/step - loss: 1.2061 - accuracy: 0.5378 - val_loss: 1.4160 - val_accuracy: 0.5063 - lr: 0.0010\n","Epoch 3/50\n","22/22 [==============================] - 11s 488ms/step - loss: 1.0400 - accuracy: 0.5963 - val_loss: 1.2999 - val_accuracy: 0.5938 - lr: 0.0010\n","Epoch 4/50\n","22/22 [==============================] - 11s 522ms/step - loss: 0.9151 - accuracy: 0.6462 - val_loss: 1.1359 - val_accuracy: 0.6125 - lr: 0.0010\n","Epoch 5/50\n","22/22 [==============================] - 11s 484ms/step - loss: 0.8645 - accuracy: 0.6605 - val_loss: 1.4669 - val_accuracy: 0.5437 - lr: 0.0010\n","Epoch 6/50\n","22/22 [==============================] - 9s 413ms/step - loss: 0.8627 - accuracy: 0.6562 - val_loss: 1.3688 - val_accuracy: 0.5625 - lr: 0.0010\n","Epoch 7/50\n","22/22 [==============================] - 11s 487ms/step - loss: 0.7840 - accuracy: 0.6904 - val_loss: 1.3059 - val_accuracy: 0.5375 - lr: 0.0010\n","Epoch 8/50\n","22/22 [==============================] - ETA: 0s - loss: 0.8186 - accuracy: 0.6805\n","Epoch 8: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n","22/22 [==============================] - 12s 532ms/step - loss: 0.8186 - accuracy: 0.6805 - val_loss: 1.2100 - val_accuracy: 0.5500 - lr: 0.0010\n","Epoch 9/50\n","22/22 [==============================] - 11s 498ms/step - loss: 0.7186 - accuracy: 0.7118 - val_loss: 1.1547 - val_accuracy: 0.5938 - lr: 1.0000e-04\n","Epoch 10/50\n","22/22 [==============================] - 11s 484ms/step - loss: 0.6680 - accuracy: 0.7361 - val_loss: 1.1347 - val_accuracy: 0.6125 - lr: 1.0000e-04\n","Epoch 11/50\n","22/22 [==============================] - 12s 522ms/step - loss: 0.5987 - accuracy: 0.7618 - val_loss: 1.1277 - val_accuracy: 0.5938 - lr: 1.0000e-04\n","Epoch 12/50\n","22/22 [==============================] - 12s 540ms/step - loss: 0.6053 - accuracy: 0.7618 - val_loss: 1.1005 - val_accuracy: 0.6000 - lr: 1.0000e-04\n","Epoch 13/50\n","22/22 [==============================] - 12s 530ms/step - loss: 0.6035 - accuracy: 0.7703 - val_loss: 1.0938 - val_accuracy: 0.5875 - lr: 1.0000e-04\n","Epoch 14/50\n","22/22 [==============================] - 12s 536ms/step - loss: 0.5957 - accuracy: 0.7832 - val_loss: 1.0699 - val_accuracy: 0.6125 - lr: 1.0000e-04\n","Epoch 15/50\n","22/22 [==============================] - 10s 438ms/step - loss: 0.5672 - accuracy: 0.7746 - val_loss: 1.0868 - val_accuracy: 0.5938 - lr: 1.0000e-04\n","Epoch 16/50\n","22/22 [==============================] - 10s 448ms/step - loss: 0.5851 - accuracy: 0.7803 - val_loss: 1.0730 - val_accuracy: 0.6062 - lr: 1.0000e-04\n","Epoch 17/50\n","22/22 [==============================] - 11s 513ms/step - loss: 0.6002 - accuracy: 0.7732 - val_loss: 1.0435 - val_accuracy: 0.6313 - lr: 1.0000e-04\n","Epoch 18/50\n","22/22 [==============================] - 11s 503ms/step - loss: 0.5559 - accuracy: 0.7832 - val_loss: 1.0613 - val_accuracy: 0.6313 - lr: 1.0000e-04\n","Epoch 19/50\n","22/22 [==============================] - 10s 465ms/step - loss: 0.5663 - accuracy: 0.7817 - val_loss: 1.0540 - val_accuracy: 0.5875 - lr: 1.0000e-04\n","Epoch 20/50\n","22/22 [==============================] - 10s 446ms/step - loss: 0.5749 - accuracy: 0.7803 - val_loss: 1.0494 - val_accuracy: 0.6125 - lr: 1.0000e-04\n","Epoch 21/50\n","22/22 [==============================] - 12s 559ms/step - loss: 0.5528 - accuracy: 0.7974 - val_loss: 1.0370 - val_accuracy: 0.5938 - lr: 1.0000e-04\n","Epoch 22/50\n","22/22 [==============================] - 12s 537ms/step - loss: 0.5016 - accuracy: 0.8345 - val_loss: 1.0486 - val_accuracy: 0.5875 - lr: 1.0000e-04\n","Epoch 23/50\n","22/22 [==============================] - 12s 539ms/step - loss: 0.5211 - accuracy: 0.8103 - val_loss: 1.0479 - val_accuracy: 0.6000 - lr: 1.0000e-04\n","Epoch 24/50\n","22/22 [==============================] - 11s 485ms/step - loss: 0.5029 - accuracy: 0.8074 - val_loss: 1.0368 - val_accuracy: 0.5938 - lr: 1.0000e-04\n","Epoch 25/50\n","22/22 [==============================] - 11s 464ms/step - loss: 0.5544 - accuracy: 0.7903 - val_loss: 1.0253 - val_accuracy: 0.6187 - lr: 1.0000e-04\n","Epoch 26/50\n","22/22 [==============================] - 12s 533ms/step - loss: 0.5421 - accuracy: 0.7974 - val_loss: 1.0260 - val_accuracy: 0.6000 - lr: 1.0000e-04\n","Epoch 27/50\n","22/22 [==============================] - 12s 530ms/step - loss: 0.5272 - accuracy: 0.8017 - val_loss: 1.0395 - val_accuracy: 0.6187 - lr: 1.0000e-04\n","Epoch 28/50\n","22/22 [==============================] - 11s 497ms/step - loss: 0.4991 - accuracy: 0.8203 - val_loss: 1.0362 - val_accuracy: 0.6062 - lr: 1.0000e-04\n","Epoch 29/50\n","22/22 [==============================] - ETA: 0s - loss: 0.5663 - accuracy: 0.8040\n","Epoch 29: ReduceLROnPlateau reducing learning rate to 1.0000000474974514e-05.\n","22/22 [==============================] - 10s 469ms/step - loss: 0.5663 - accuracy: 0.8040 - val_loss: 1.0799 - val_accuracy: 0.6062 - lr: 1.0000e-04\n","Epoch 30/50\n","22/22 [==============================] - 11s 516ms/step - loss: 0.5282 - accuracy: 0.7974 - val_loss: 1.0713 - val_accuracy: 0.6062 - lr: 1.0000e-05\n","Epoch 31/50\n","22/22 [==============================] - 11s 483ms/step - loss: 0.5252 - accuracy: 0.8017 - val_loss: 1.0593 - val_accuracy: 0.6062 - lr: 1.0000e-05\n","Epoch 32/50\n","22/22 [==============================] - 9s 415ms/step - loss: 0.5251 - accuracy: 0.8146 - val_loss: 1.0496 - val_accuracy: 0.6000 - lr: 1.0000e-05\n","Epoch 33/50\n","22/22 [==============================] - ETA: 0s - loss: 0.5206 - accuracy: 0.8074\n","Epoch 33: ReduceLROnPlateau reducing learning rate to 1.0000000656873453e-06.\n","22/22 [==============================] - 11s 495ms/step - loss: 0.5206 - accuracy: 0.8074 - val_loss: 1.0425 - val_accuracy: 0.6000 - lr: 1.0000e-05\n","\n","Required time:  0:07:07.084419\n","\n"]}],"source":["init_time = datetime.datetime.now()\n","\n","\n","train_steps = train_generator.samples // BATCH_SIZE\n","valid_steps = test_generator.samples // BATCH_SIZE\n","\n","early_stopping = EarlyStopping(monitor=\"val_loss\", patience=8, mode=\"min\")\n","checkpoint = ModelCheckpoint(\"loss-{val_loss:.4f}.h5\", monitor=\"val_loss\", verbose=0,\n","                             save_best_only=True, save_weights_only=True, mode=\"min\")\n","learning_rate_reduction = ReduceLROnPlateau(monitor=\"val_loss\", factor=0.1, patience=4,\n","                                            min_lr=1e-7, verbose=1, mode=\"min\")\n","history = trf_lr_efficientnet_model.fit(\n","    train_generator,\n","    validation_data=test_generator,\n","    batch_size=BATCH_SIZE,\n","    epochs=EPOCHS,\n","    steps_per_epoch=train_steps,\n","    validation_steps=valid_steps,\n","    callbacks=[\n","                checkpoint,\n","                early_stopping,\n","                learning_rate_reduction],\n","    verbose=1,\n","    )\n","requared_time = datetime.datetime.now() - init_time\n","print(f'\\nRequired time:  {str(requared_time)}\\n')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"iMCy1E2uBuAg"},"outputs":[],"source":["def plot_performance(model_name, accuracy, val_accuracy, loss, val_loss):\n","  plt.figure(figsize=(10,5))\n","  plt.subplot(1,2,1)\n","  plt.plot(loss)\n","  plt.plot(val_loss)\n","  plt.title('{} : Loss'.format(model_name), fontsize=12, fontweight='bold')\n","  plt.ylabel('Loss')\n","  plt.xlabel('Epoch')\n","  plt.legend(['train', 'test'], loc='upper right')\n","\n","  plt.subplot(1,2,2)\n","  plt.plot(accuracy)\n","  plt.plot(val_accuracy)\n","  plt.title('{} : Accuracy'.format(model_name), fontsize=12, fontweight='bold')\n","  plt.ylabel('Accuracy')\n","  plt.xlabel('Epoch')\n","  plt.legend(['train', 'test'], loc='upper right')"]},{"cell_type":"code","source":["plot_performance(model_name='EfficientNetV2-S',\n","                  accuracy=history.history['accuracy'],\n","                 val_accuracy=history.history['val_accuracy'],\n","                 loss=history.history['loss'],\n","                 val_loss=history.history['val_loss'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":392},"id":"anfuX7iy-Qex","outputId":"c93297d5-5601-4878-dcfe-a2c7976cb14c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"V0cM83MiCgPM","outputId":"2135e0ab-1d38-470e-f8ef-ec15c6c30daa"},"outputs":[{"output_type":"stream","name":"stdout","text":["5/5 [==============================] - 1s 122ms/step - loss: 1.0425 - accuracy: 0.6000\n","\n","accuracy: 0.6000000238418579 loss:  1.0424710512161255\n"]}],"source":["test_steps = test_generator.samples // BATCH_SIZE\n","\n","test_loss, test_acc = trf_lr_efficientnet_model.evaluate(test_generator, steps=test_steps)\n","print('\\naccuracy:', test_acc, 'loss: ',test_loss)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1gHlxHICCjs7","outputId":"eb9ef359-532e-4cb7-b29a-da6d71250258"},"outputs":[{"output_type":"stream","name":"stdout","text":["5/5 [==============================] - 2s 124ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([0, 4, 2, 4, 1, 3, 1, 2, 3, 0, 6, 3, 1, 0, 1, 0, 3, 6, 0, 0])"]},"metadata":{},"execution_count":23}],"source":["predict = trf_lr_efficientnet_model.predict(test_generator, steps=test_steps)\n","y_hat = np.argmax(predict, axis=1)\n","y_hat[:20]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e-2F-dRNClvD","outputId":"fab241c6-4ba2-4f1d-e141-25d0fddef0b4"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([2, 4, 2, 4, 0, 1, 1, 2, 0, 3, 6, 1, 0, 0, 1, 2, 1, 6, 0, 2])"]},"metadata":{},"execution_count":24}],"source":["test_labels_df = pd.DataFrame()\n","test_labels_df[['class']] = test_data[['class']]\n","\n","change = {\n","'0' : 0,\n","'1' : 1,\n","'2' : 2,\n","'3' : 3,\n","'4' : 4,\n","'5' : 5,\n","'6' : 6,\n","\n","}\n","\n","test_labels_df['class'] = test_labels_df['class'].map(change)\n","test_labels_df = test_labels_df[ : test_steps*BATCH_SIZE]\n","\n","\n","y_test = np.array(test_labels_df['class'])\n","y_test[:20]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":708},"id":"qNDyqYkUCxC1","outputId":"7c0ea263-1d8a-4945-be73-6dba196d7f3c"},"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.48      0.44      0.46        32\n","           1       0.59      0.79      0.68        34\n","           2       0.71      0.41      0.52        29\n","           3       0.45      0.38      0.41        24\n","           4       0.61      0.88      0.72        16\n","           5       0.79      0.92      0.85        12\n","           6       0.82      0.69      0.75        13\n","\n","    accuracy                           0.60       160\n","   macro avg       0.63      0.64      0.63       160\n","weighted avg       0.60      0.60      0.59       160\n"," \n","\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":25},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["print(classification_report(y_test, y_hat), '\\n')\n","cm = confusion_matrix(y_test, y_hat)\n","sns.heatmap(cm, annot=True, cmap=\"Blues\", fmt='.0f', cbar=False)"]},{"cell_type":"code","source":["train_datagen = ImageDataGenerator(rescale=1./255,\n","                                    rotation_range=40,\n","                                    width_shift_range=0.2,\n","                                    height_shift_range=0.2,\n","                                    shear_range=0.2,\n","                                    zoom_range=0.2,\n","                                    horizontal_flip=True,\n","                                    fill_mode='nearest')\n","\n","train_generator = train_datagen.flow_from_dataframe(\n","                  train_data,\n","                  x_col=\"filename\",\n","                  y_col=\"class\",\n","                  target_size=(IM_HEIGHT, IM_WIDTH),\n","                  class_mode='categorical',\n","                  # batch_size= BATCH_SIZE,\n","                  color_mode='rgb',\n","                  shuffle=False,\n","                  num_parallel_calls=AUTOTUNE)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rBy2nWTMvPy4","outputId":"5c736790-8dfb-4981-b706-cc2569335236"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 733 validated image filenames belonging to 7 classes.\n"]}]},{"cell_type":"code","source":["train_steps = train_generator.samples // BATCH_SIZE\n","\n","y_train_pred_proba = trf_lr_efficientnet_model.predict(train_generator)\n","y_train_pred = np.argmax(y_train_pred_proba, axis=1)\n","y_train_true = train_generator.classes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DsIpckdVvOJe","outputId":"5c52ba97-27d3-4669-f72f-6ced36be8165"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["23/23 [==============================] - 10s 458ms/step\n"]}]},{"cell_type":"code","source":["train_report = classification_report(y_train_true, y_train_pred)\n","print(\"Classification Report for Training Data:\")\n","print(train_report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XDwkz_hKvUqT","outputId":"94bd0dc6-8d40-49b7-ea35-aa51b1097305"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report for Training Data:\n","              precision    recall  f1-score   support\n","\n","           0       0.76      0.76      0.76       157\n","           1       0.83      0.88      0.85       146\n","           2       0.82      0.79      0.81       120\n","           3       0.73      0.71      0.72       117\n","           4       0.87      0.87      0.87        78\n","           5       1.00      0.97      0.98        59\n","           6       0.97      1.00      0.98        56\n","\n","    accuracy                           0.83       733\n","   macro avg       0.85      0.85      0.85       733\n","weighted avg       0.83      0.83      0.83       733\n","\n"]}]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}