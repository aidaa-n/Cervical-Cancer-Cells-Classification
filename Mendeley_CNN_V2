{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0spIKVA_zTdu","outputId":"368f6688-3a63-45ff-ff5b-9e6395344664"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras\n","  Downloading keras-3.4.1-py3-none-any.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m9.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting absl-py (from keras)\n","  Downloading absl_py-2.1.0-py3-none-any.whl (133 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m133.7/133.7 kB\u001b[0m \u001b[31m8.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting numpy (from keras)\n","  Downloading numpy-2.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (19.5 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m19.5/19.5 MB\u001b[0m \u001b[31m12.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting rich (from keras)\n","  Downloading rich-13.7.1-py3-none-any.whl (240 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m240.7/240.7 kB\u001b[0m \u001b[31m9.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting namex (from keras)\n","  Downloading namex-0.0.8-py3-none-any.whl (5.8 kB)\n","Collecting h5py (from keras)\n","  Downloading h5py-3.11.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.3/5.3 MB\u001b[0m \u001b[31m30.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting optree (from keras)\n","  Downloading optree-0.12.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (347 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m347.7/347.7 kB\u001b[0m \u001b[31m16.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting ml-dtypes (from keras)\n","  Downloading ml_dtypes-0.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m26.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting packaging (from keras)\n","  Downloading packaging-24.1-py3-none-any.whl (53 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.0/54.0 kB\u001b[0m \u001b[31m2.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting typing-extensions>=4.5.0 (from optree->keras)\n","  Downloading typing_extensions-4.12.2-py3-none-any.whl (37 kB)\n","Collecting markdown-it-py>=2.2.0 (from rich->keras)\n","  Downloading markdown_it_py-3.0.0-py3-none-any.whl (87 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m87.5/87.5 kB\u001b[0m \u001b[31m5.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pygments<3.0.0,>=2.13.0 (from rich->keras)\n","  Downloading pygments-2.18.0-py3-none-any.whl (1.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m27.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting mdurl~=0.1 (from markdown-it-py>=2.2.0->rich->keras)\n","  Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)\n","Installing collected packages: namex, typing-extensions, pygments, packaging, numpy, mdurl, absl-py, optree, ml-dtypes, markdown-it-py, h5py, rich, keras\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","ipython 7.34.0 requires jedi>=0.16, which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cublas-cu12==12.1.3.1; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cuda-cupti-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cuda-nvrtc-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cuda-runtime-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cudnn-cu12==8.9.2.26; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cufft-cu12==11.0.2.54; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-curand-cu12==10.3.2.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cusolver-cu12==11.4.5.107; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cusparse-cu12==12.1.0.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-nccl-cu12==2.20.5; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-nvtx-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","accelerate 0.32.1 requires numpy<2.0.0,>=1.17, but you have numpy 2.0.1 which is incompatible.\n","astropy 5.3.4 requires numpy<2,>=1.21, but you have numpy 2.0.1 which is incompatible.\n","cudf-cu12 24.4.1 requires numpy<2.0a0,>=1.23, but you have numpy 2.0.1 which is incompatible.\n","cupy-cuda12x 12.2.0 requires numpy<1.27,>=1.20, but you have numpy 2.0.1 which is incompatible.\n","ibis-framework 8.0.0 requires numpy<2,>=1, but you have numpy 2.0.1 which is incompatible.\n","numba 0.58.1 requires numpy<1.27,>=1.22, but you have numpy 2.0.1 which is incompatible.\n","rmm-cu12 24.4.0 requires numpy<2.0a0,>=1.23, but you have numpy 2.0.1 which is incompatible.\n","scipy 1.11.4 requires numpy<1.28.0,>=1.21.6, but you have numpy 2.0.1 which is incompatible.\n","tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.4.1 which is incompatible.\n","tensorflow 2.15.0 requires ml-dtypes~=0.2.0, but you have ml-dtypes 0.4.0 which is incompatible.\n","tensorflow 2.15.0 requires numpy<2.0.0,>=1.23.5, but you have numpy 2.0.1 which is incompatible.\n","thinc 8.2.5 requires numpy<2.0.0,>=1.19.0; python_version >= \"3.9\", but you have numpy 2.0.1 which is incompatible.\n","transformers 4.42.4 requires numpy<2.0,>=1.17, but you have numpy 2.0.1 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed absl-py-2.1.0 h5py-3.11.0 keras-3.4.1 markdown-it-py-3.0.0 mdurl-0.1.2 ml-dtypes-0.4.0 namex-0.0.8 numpy-2.0.1 optree-0.12.1 packaging-24.1 pygments-2.18.0 rich-13.7.1 typing-extensions-4.12.2\n"]}],"source":["!pip install keras -tuner"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"msbd7Eo4zmNt","outputId":"e6c098d3-e54b-4cd2-b0ac-56be19675241"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras_tuner\n","  Downloading keras_tuner-1.4.7-py3-none-any.whl (129 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m129.1/129.1 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: keras in /usr/local/lib/python3.10/dist-packages (from keras_tuner) (2.15.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from keras_tuner) (24.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from keras_tuner) (2.31.0)\n","Collecting kt-legacy (from keras_tuner)\n","  Downloading kt_legacy-1.0.5-py3-none-any.whl (9.6 kB)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (2024.7.4)\n","Installing collected packages: kt-legacy, keras_tuner\n","Successfully installed keras_tuner-1.4.7 kt-legacy-1.0.5\n"]}],"source":["!pip install keras_tuner"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"AO-O0975zWoG"},"outputs":[],"source":["import cv2\n","import datetime\n","import os\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import tensorflow_hub as hub\n","\n","from sklearn.utils import shuffle\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, recall_score\n","\n","from tensorflow.keras import backend as K\n","from tensorflow.keras import layers\n","from tensorflow.keras import Model, Sequential\n","from tensorflow.keras.utils import plot_model\n","from tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint, EarlyStopping\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","#utility & processing\n","from tensorflow.keras import utils\n","from tensorflow.keras.utils import to_categorical\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras import regularizers\n","\n","#callbacks\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","\n","#data augmentation\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","\n","#keras tuner\n","import keras_tuner\n","from keras_tuner import RandomSearch\n","from keras_tuner.engine.hyperparameters import HyperParameters\n","\n","#warnings\n","import warnings\n","warnings.filterwarnings('ignore')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LiPCpE9Izpwa","outputId":"5cd32faf-02b7-4ea0-837e-e3b2342231ed"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting tensorflow-addons\n","  Downloading tensorflow_addons-0.23.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (611 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m611.8/611.8 kB\u001b[0m \u001b[31m15.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow-addons) (24.1)\n","Collecting typeguard<3.0.0,>=2.7 (from tensorflow-addons)\n","  Downloading typeguard-2.13.3-py3-none-any.whl (17 kB)\n","Installing collected packages: typeguard, tensorflow-addons\n","Successfully installed tensorflow-addons-0.23.0 typeguard-2.13.3\n"]}],"source":["!pip install tensorflow-addons\n","import tensorflow_addons as tfa"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KzCMVOg3zv41","outputId":"bca74fef-9d98-43c4-c2cf-31a189160c0d"},"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading...\n","From (original): https://drive.google.com/uc?id=1uBWS1y-K031wvMrVryTQ0-GE1bva89mQ\n","From (redirected): https://drive.google.com/uc?id=1uBWS1y-K031wvMrVryTQ0-GE1bva89mQ&confirm=t&uuid=12a04980-6c26-4d9f-954b-c627ab8d6461\n","To: /content/mendeley.zip\n","100% 2.21G/2.21G [01:23<00:00, 26.6MB/s]\n"]}],"source":["# https://drive.google.com/file/d/1uBWS1y-K031wvMrVryTQ0-GE1bva89mQ/view?usp=sharing\n","!gdown 1uBWS1y-K031wvMrVryTQ0-GE1bva89mQ"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Voqm5bLCzyNK"},"outputs":[],"source":["#unzip dataset\n","%%capture\n","!unzip mendeley.zip;"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0nWFA-Bhz1fm","outputId":"d2a30710-afbc-4395-8156-9af8677ea4d1"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oZF5laTSz2GE","outputId":"e61f3cc6-dbc0-4425-917e-441492bde9dc"},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/mendeley\n","/content/mendeley/Negative for Intraepithelial malignancy\n","/content/mendeley/Low squamous intra-epithelial lesion\n","/content/mendeley/Squamous cell carcinoma\n","/content/mendeley/High squamous intra-epithelial lesion\n"]}],"source":["for dirname, _, filenames in os.walk('/content/mendeley'):\n","    print(dirname)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jEqu3tL_z3tG","outputId":"c13fc1f2-560f-4d80-8ce0-4faa2ba906f7"},"outputs":[{"output_type":"stream","name":"stdout","text":["963\n"]},{"output_type":"execute_result","data":{"text/plain":["['/content/mendeley/Low squamous intra-epithelial lesion/LSIL_4 (26).jpg',\n"," '/content/mendeley/Low squamous intra-epithelial lesion/LSIL_3 (12).jpg',\n"," '/content/mendeley/Low squamous intra-epithelial lesion/LSIL_4 (15).jpg']"]},"metadata":{},"execution_count":9}],"source":["filenames = tf.io.gfile.glob('/content/mendeley/*/*')\n","print(len(filenames))\n","filenames[:3]"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":527},"id":"BHBOkIEM0BSX","outputId":"39f14c4d-0f91-4657-a3a5-9907eafb3c8a"},"outputs":[{"output_type":"stream","name":"stdout","text":["class\n","Negative for Intraepithelial malignancy    613\n","High squamous intra-epithelial lesion      163\n","Low squamous intra-epithelial lesion       113\n","Squamous cell carcinoma                     74\n","Name: count, dtype: int64\n"]},{"output_type":"execute_result","data":{"text/plain":["                                              filename  \\\n","0    /content/mendeley/Low squamous intra-epithelia...   \n","1    /content/mendeley/Low squamous intra-epithelia...   \n","2    /content/mendeley/Low squamous intra-epithelia...   \n","3    /content/mendeley/Low squamous intra-epithelia...   \n","4    /content/mendeley/Low squamous intra-epithelia...   \n","..                                                 ...   \n","958  /content/mendeley/High squamous intra-epitheli...   \n","959  /content/mendeley/High squamous intra-epitheli...   \n","960  /content/mendeley/High squamous intra-epitheli...   \n","961  /content/mendeley/High squamous intra-epitheli...   \n","962  /content/mendeley/High squamous intra-epitheli...   \n","\n","                                     class  \n","0     Low squamous intra-epithelial lesion  \n","1     Low squamous intra-epithelial lesion  \n","2     Low squamous intra-epithelial lesion  \n","3     Low squamous intra-epithelial lesion  \n","4     Low squamous intra-epithelial lesion  \n","..                                     ...  \n","958  High squamous intra-epithelial lesion  \n","959  High squamous intra-epithelial lesion  \n","960  High squamous intra-epithelial lesion  \n","961  High squamous intra-epithelial lesion  \n","962  High squamous intra-epithelial lesion  \n","\n","[963 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-133ab5ae-cd0e-412b-adac-5886b269e057\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>filename</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>958</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>High squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>959</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>High squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>960</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>High squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>961</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>High squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>962</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>High squamous intra-epithelial lesion</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>963 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-133ab5ae-cd0e-412b-adac-5886b269e057')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-133ab5ae-cd0e-412b-adac-5886b269e057 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-133ab5ae-cd0e-412b-adac-5886b269e057');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7eef11ed-9fe3-40b9-84d5-dc1f226f8249\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7eef11ed-9fe3-40b9-84d5-dc1f226f8249')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7eef11ed-9fe3-40b9-84d5-dc1f226f8249 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_934df133-c618-415d-9aa4-f581f2a43cd0\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_934df133-c618-415d-9aa4-f581f2a43cd0 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 963,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 963,\n        \"samples\": [\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_17_ (10).jpg\",\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_42_ (17).jpg\",\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_18_ (1).jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Negative for Intraepithelial malignancy\",\n          \"High squamous intra-epithelial lesion\",\n          \"Low squamous intra-epithelial lesion\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}],"source":["data = pd.DataFrame()\n","for el in range(0, len(filenames)):\n","    target = filenames[el].split('/')[-2]\n","    path = filenames[el]\n","\n","    data.loc[el, 'filename'] = path\n","    data.loc[el, 'class'] = target\n","\n","print(data['class'].value_counts(dropna=False))\n","data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"MKR638W20B78","outputId":"5e579210-169b-4055-a2a0-933c5bf85dfe"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              filename  \\\n","0    /content/mendeley/Negative for Intraepithelial...   \n","1    /content/mendeley/Negative for Intraepithelial...   \n","2    /content/mendeley/Negative for Intraepithelial...   \n","3    /content/mendeley/High squamous intra-epitheli...   \n","4    /content/mendeley/Negative for Intraepithelial...   \n","..                                                 ...   \n","958  /content/mendeley/Low squamous intra-epithelia...   \n","959  /content/mendeley/Negative for Intraepithelial...   \n","960  /content/mendeley/High squamous intra-epitheli...   \n","961  /content/mendeley/Negative for Intraepithelial...   \n","962  /content/mendeley/Low squamous intra-epithelia...   \n","\n","                                       class  \n","0    Negative for Intraepithelial malignancy  \n","1    Negative for Intraepithelial malignancy  \n","2    Negative for Intraepithelial malignancy  \n","3      High squamous intra-epithelial lesion  \n","4    Negative for Intraepithelial malignancy  \n","..                                       ...  \n","958     Low squamous intra-epithelial lesion  \n","959  Negative for Intraepithelial malignancy  \n","960    High squamous intra-epithelial lesion  \n","961  Negative for Intraepithelial malignancy  \n","962     Low squamous intra-epithelial lesion  \n","\n","[963 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-d73e0ea2-1dff-4726-8f7a-b7a4c49c9e26\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>filename</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>High squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>958</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>959</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>960</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>High squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>961</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>962</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>963 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d73e0ea2-1dff-4726-8f7a-b7a4c49c9e26')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d73e0ea2-1dff-4726-8f7a-b7a4c49c9e26 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d73e0ea2-1dff-4726-8f7a-b7a4c49c9e26');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c1317e79-da9b-4699-a86c-80b71fe65d91\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c1317e79-da9b-4699-a86c-80b71fe65d91')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c1317e79-da9b-4699-a86c-80b71fe65d91 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f76aa063-00fe-4373-b329-fcb8296e7ed2\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f76aa063-00fe-4373-b329-fcb8296e7ed2 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 963,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 963,\n        \"samples\": [\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_3_ (1).jpg\",\n          \"/content/mendeley/High squamous intra-epithelial lesion/HSIL_4 (15).jpg\",\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_13_ (7).jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"High squamous intra-epithelial lesion\",\n          \"Squamous cell carcinoma\",\n          \"Negative for Intraepithelial malignancy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}],"source":["data = shuffle(data, random_state=42)\n","data.reset_index(drop=True, inplace=True)\n","data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"yZ6Xx17w0Dp6","outputId":"4247042f-3e2f-4c73-95e3-a0db72b8589d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              filename class\n","0    /content/mendeley/Negative for Intraepithelial...     0\n","1    /content/mendeley/Negative for Intraepithelial...     0\n","2    /content/mendeley/Negative for Intraepithelial...     0\n","3    /content/mendeley/High squamous intra-epitheli...     1\n","4    /content/mendeley/Negative for Intraepithelial...     0\n","..                                                 ...   ...\n","958  /content/mendeley/Low squamous intra-epithelia...     2\n","959  /content/mendeley/Negative for Intraepithelial...     0\n","960  /content/mendeley/High squamous intra-epitheli...     1\n","961  /content/mendeley/Negative for Intraepithelial...     0\n","962  /content/mendeley/Low squamous intra-epithelia...     2\n","\n","[963 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-a512c59b-8540-4ba6-99f4-a3cbf26c0498\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>filename</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>958</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>959</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>960</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>961</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>962</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>963 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a512c59b-8540-4ba6-99f4-a3cbf26c0498')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a512c59b-8540-4ba6-99f4-a3cbf26c0498 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a512c59b-8540-4ba6-99f4-a3cbf26c0498');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-77a59098-8250-4f0b-961c-5357dff31935\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-77a59098-8250-4f0b-961c-5357dff31935')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-77a59098-8250-4f0b-961c-5357dff31935 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_22d69a89-c9e6-4c8c-83aa-658e537d09ba\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_22d69a89-c9e6-4c8c-83aa-658e537d09ba button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 963,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 963,\n        \"samples\": [\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_3_ (1).jpg\",\n          \"/content/mendeley/High squamous intra-epithelial lesion/HSIL_4 (15).jpg\",\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_13_ (7).jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"1\",\n          \"3\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}],"source":["change = {\n","'Negative for Intraepithelial malignancy' : '0',\n","'High squamous intra-epithelial lesion': '1',\n","'Low squamous intra-epithelial lesion' : '2',\n","'Squamous cell carcinoma' : '3',\n","}\n","\n","data['class'] = data['class'].map(change)\n","data"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yzqhNifW0HJD","outputId":"63454434-006b-4b24-db29-f36596f0d030"},"outputs":[{"output_type":"stream","name":"stdout","text":["854 /content/mendeley/Negative for Intraepithelial malignancy/Results.csv\n","(963, 2)\n","(962, 2)\n"]}],"source":["indexes=[]\n","\n","def func(x):\n","    if x[-4:] != '.jpg':\n","        idx = data[data['filename'] == x].index\n","        indexes.append(idx[0])\n","        print(idx[0], x)\n","    return x\n","\n","data['filename'].map(func)\n","\n","print(data.shape)\n","data.drop(index=indexes, axis=0, inplace=True)\n","data.reset_index(drop=True, inplace=True)\n","print(data.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ePWO_EM60Ilq","outputId":"c9511e27-913e-4d09-a306-5062b6cec2d3"},"outputs":[{"output_type":"stream","name":"stdout","text":["(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n"]}],"source":["for el in range(100, 120):\n","    path = data.loc[el, 'filename']\n","    img  = cv2.imread(path)\n","    print(img.shape)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z3gLCZ8M0M5_"},"outputs":[],"source":["BATCH_SIZE = 32\n","EPOCHS = 50\n","IM_HEIGHT = 224\n","IM_WIDTH = 224\n","\n","AUTOTUNE = tf.data.experimental.AUTOTUNE\n","\n","tf.random.set_seed(999)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Mhj1jNPH0KRd","outputId":"2566f650-07be-4b5f-eb69-21fe439a15d3"},"outputs":[{"output_type":"stream","name":"stdout","text":["class\n","0    489\n","1    130\n","2     91\n","3     59\n","Name: count, dtype: int64\n","class\n","0    123\n","1     33\n","2     22\n","3     15\n","Name: count, dtype: int64\n"]}],"source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","\n","# Menghapus baris dengan nilai NaN pada kolom 'class'\n","data_cleaned = data.dropna(subset=['class'])\n","\n","# Melakukan split data menjadi train dan test set\n","train_data, test_data = train_test_split(data_cleaned, test_size=0.2, random_state=42, stratify=data_cleaned['class'])\n","\n","print(train_data['class'].value_counts(dropna=False))\n","print(test_data['class'].value_counts(dropna=False))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YV2G7P5F0Y4-","outputId":"27d28ac1-4960-4f5f-b9f8-ef83314824b4"},"outputs":[{"output_type":"stream","name":"stdout","text":["Found 769 validated image filenames belonging to 4 classes.\n","Found 193 validated image filenames belonging to 4 classes.\n"]}],"source":["train_datagen = ImageDataGenerator(rescale=1./255,\n","                                    rotation_range=40,\n","                                    width_shift_range=0.2,\n","                                    height_shift_range=0.2,\n","                                    horizontal_flip=True,\n","                                    fill_mode='nearest')\n","\n","train_generator = train_datagen.flow_from_dataframe(\n","                  train_data,\n","                  x_col=\"filename\",\n","                  y_col=\"class\",\n","                  target_size=(IM_HEIGHT, IM_WIDTH),\n","                  class_mode='categorical',\n","                  batch_size= BATCH_SIZE,\n","                  color_mode='rgb',\n","                  shuffle=True,\n","                  num_parallel_calls=AUTOTUNE)\n","\n","test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","test_generator = test_datagen.flow_from_dataframe(\n","                 test_data,\n","                 x_col=\"filename\",\n","                 y_col=\"class\",\n","                 target_size=(IM_HEIGHT, IM_WIDTH),\n","                 class_mode='categorical',\n","                 batch_size= BATCH_SIZE,\n","                 color_mode='rgb',\n","                 shuffle=False,\n","                 num_parallel_calls=AUTOTUNE)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"M2pTpbS80ffC","outputId":"d7cadc05-2365-4c0f-e0d8-f97d48464de8"},"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 222, 222, 32)      896       \n","                                                                 \n"," batch_normalization (Batch  (None, 222, 222, 32)      128       \n"," Normalization)                                                  \n","                                                                 \n"," max_pooling2d (MaxPooling2  (None, 111, 111, 32)      0         \n"," D)                                                              \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 109, 109, 32)      9248      \n","                                                                 \n"," conv2d_2 (Conv2D)           (None, 107, 107, 32)      9248      \n","                                                                 \n"," max_pooling2d_1 (MaxPoolin  (None, 53, 53, 32)        0         \n"," g2D)                                                            \n","                                                                 \n"," conv2d_3 (Conv2D)           (None, 51, 51, 64)        18496     \n","                                                                 \n"," max_pooling2d_2 (MaxPoolin  (None, 25, 25, 64)        0         \n"," g2D)                                                            \n","                                                                 \n"," dropout (Dropout)           (None, 25, 25, 64)        0         \n","                                                                 \n"," flatten (Flatten)           (None, 40000)             0         \n","                                                                 \n"," dense (Dense)               (None, 64)                2560064   \n","                                                                 \n"," dense_1 (Dense)             (None, 64)                4160      \n","                                                                 \n"," dense_2 (Dense)             (None, 4)                 260       \n","                                                                 \n","=================================================================\n","Total params: 2602500 (9.93 MB)\n","Trainable params: 2602436 (9.93 MB)\n","Non-trainable params: 64 (256.00 Byte)\n","_________________________________________________________________\n"]}],"source":["def create_model():\n","    model = tf.keras.models.Sequential([\n","        tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(IM_HEIGHT, IM_WIDTH, 3)),\n","        tf.keras.layers.BatchNormalization(),\n","        tf.keras.layers.MaxPool2D(2,2),\n","\n","\n","        tf.keras.layers.Conv2D(32,(3,3), activation='relu'),\n","        tf.keras.layers.Conv2D(32,(3,3), activation='relu'),\n","        tf.keras.layers.MaxPool2D(2,2),\n","\n","        tf.keras.layers.Conv2D(64,(3,3), activation='relu'),\n","        tf.keras.layers.MaxPool2D(2,2),\n","\n","        tf.keras.layers.Dropout(0.5),\n","        tf.keras.layers.Flatten(),\n","        tf.keras.layers.Dense(64, activation='relu'),\n","        tf.keras.layers.Dense(64, activation='relu'),\n","        tf.keras.layers.Dense(4, activation='softmax')\n","    ])\n","\n","    model.compile(optimizer='adam',\n","                  loss = 'categorical_crossentropy',\n","                  metrics = 'accuracy')\n","\n","    return model\n","\n","model = create_model()\n","model.summary()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vW6qE63y0i_i","outputId":"005c6b3a-6a22-4fdf-dc26-a0a9119c488b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","24/24 [==============================] - 89s 3s/step - loss: 1.1548 - accuracy: 0.6391 - val_loss: 1.2657 - val_accuracy: 0.2292 - lr: 0.0010\n","Epoch 2/50\n","24/24 [==============================] - 80s 3s/step - loss: 0.4905 - accuracy: 0.7965 - val_loss: 1.3301 - val_accuracy: 0.2240 - lr: 0.0010\n","Epoch 3/50\n","24/24 [==============================] - 72s 3s/step - loss: 0.4230 - accuracy: 0.8155 - val_loss: 1.0021 - val_accuracy: 0.6719 - lr: 0.0010\n","Epoch 4/50\n","24/24 [==============================] - 80s 3s/step - loss: 0.2836 - accuracy: 0.8901 - val_loss: 0.8597 - val_accuracy: 0.7760 - lr: 0.0010\n","Epoch 5/50\n","24/24 [==============================] - 72s 3s/step - loss: 0.4476 - accuracy: 0.8426 - val_loss: 0.9842 - val_accuracy: 0.7188 - lr: 0.0010\n","Epoch 6/50\n","24/24 [==============================] - 79s 3s/step - loss: 0.3414 - accuracy: 0.8684 - val_loss: 0.8860 - val_accuracy: 0.5573 - lr: 0.0010\n","Epoch 7/50\n","24/24 [==============================] - 72s 3s/step - loss: 0.2268 - accuracy: 0.9050 - val_loss: 0.7074 - val_accuracy: 0.6979 - lr: 0.0010\n","Epoch 8/50\n","24/24 [==============================] - 73s 3s/step - loss: 0.1649 - accuracy: 0.9240 - val_loss: 0.6184 - val_accuracy: 0.7604 - lr: 0.0010\n","Epoch 9/50\n","24/24 [==============================] - 71s 3s/step - loss: 0.2313 - accuracy: 0.8996 - val_loss: 0.5267 - val_accuracy: 0.7917 - lr: 0.0010\n","Epoch 10/50\n","24/24 [==============================] - 79s 3s/step - loss: 0.8660 - accuracy: 0.7313 - val_loss: 0.9054 - val_accuracy: 0.6875 - lr: 0.0010\n","Epoch 11/50\n","24/24 [==============================] - 77s 3s/step - loss: 0.4790 - accuracy: 0.7856 - val_loss: 1.0609 - val_accuracy: 0.6979 - lr: 0.0010\n","Epoch 12/50\n","24/24 [==============================] - 80s 3s/step - loss: 0.3087 - accuracy: 0.8833 - val_loss: 0.9635 - val_accuracy: 0.7344 - lr: 0.0010\n","Epoch 13/50\n","24/24 [==============================] - ETA: 0s - loss: 0.7993 - accuracy: 0.6798\n","Epoch 13: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n","24/24 [==============================] - 70s 3s/step - loss: 0.7993 - accuracy: 0.6798 - val_loss: 1.1512 - val_accuracy: 0.3646 - lr: 0.0010\n","Epoch 14/50\n","24/24 [==============================] - 71s 3s/step - loss: 0.5889 - accuracy: 0.7598 - val_loss: 1.0165 - val_accuracy: 0.6510 - lr: 1.0000e-04\n","Epoch 15/50\n","24/24 [==============================] - 78s 3s/step - loss: 0.4054 - accuracy: 0.8589 - val_loss: 0.7036 - val_accuracy: 0.8490 - lr: 1.0000e-04\n","Epoch 16/50\n","24/24 [==============================] - 80s 3s/step - loss: 0.3597 - accuracy: 0.8657 - val_loss: 0.5372 - val_accuracy: 0.8490 - lr: 1.0000e-04\n","Epoch 17/50\n","24/24 [==============================] - 70s 3s/step - loss: 0.3012 - accuracy: 0.8711 - val_loss: 0.4884 - val_accuracy: 0.8646 - lr: 1.0000e-04\n","Epoch 18/50\n","24/24 [==============================] - 71s 3s/step - loss: 0.2767 - accuracy: 0.8860 - val_loss: 0.4010 - val_accuracy: 0.8802 - lr: 1.0000e-04\n","Epoch 19/50\n","24/24 [==============================] - 77s 3s/step - loss: 0.2765 - accuracy: 0.8901 - val_loss: 0.4286 - val_accuracy: 0.8750 - lr: 1.0000e-04\n","Epoch 20/50\n","24/24 [==============================] - 73s 3s/step - loss: 0.2523 - accuracy: 0.8955 - val_loss: 0.3163 - val_accuracy: 0.9010 - lr: 1.0000e-04\n","Epoch 21/50\n","24/24 [==============================] - 78s 3s/step - loss: 0.2470 - accuracy: 0.9037 - val_loss: 0.2957 - val_accuracy: 0.8958 - lr: 1.0000e-04\n","Epoch 22/50\n","24/24 [==============================] - 72s 3s/step - loss: 0.2376 - accuracy: 0.9064 - val_loss: 0.2684 - val_accuracy: 0.9062 - lr: 1.0000e-04\n","Epoch 23/50\n","24/24 [==============================] - 70s 3s/step - loss: 0.2411 - accuracy: 0.8942 - val_loss: 0.2430 - val_accuracy: 0.9219 - lr: 1.0000e-04\n","Epoch 24/50\n","24/24 [==============================] - 82s 3s/step - loss: 0.2230 - accuracy: 0.9128 - val_loss: 0.2210 - val_accuracy: 0.9271 - lr: 1.0000e-04\n","Epoch 25/50\n","24/24 [==============================] - 78s 3s/step - loss: 0.2141 - accuracy: 0.9077 - val_loss: 0.1964 - val_accuracy: 0.9271 - lr: 1.0000e-04\n","Epoch 26/50\n","24/24 [==============================] - 78s 3s/step - loss: 0.2094 - accuracy: 0.9145 - val_loss: 0.1977 - val_accuracy: 0.9323 - lr: 1.0000e-04\n","Epoch 27/50\n","24/24 [==============================] - 76s 3s/step - loss: 0.2020 - accuracy: 0.9213 - val_loss: 0.1757 - val_accuracy: 0.9323 - lr: 1.0000e-04\n","Epoch 28/50\n","24/24 [==============================] - 77s 3s/step - loss: 0.2155 - accuracy: 0.9145 - val_loss: 0.1996 - val_accuracy: 0.9323 - lr: 1.0000e-04\n","Epoch 29/50\n","24/24 [==============================] - 77s 3s/step - loss: 0.2252 - accuracy: 0.9104 - val_loss: 0.2918 - val_accuracy: 0.8385 - lr: 1.0000e-04\n","Epoch 30/50\n","24/24 [==============================] - 78s 3s/step - loss: 0.2022 - accuracy: 0.9104 - val_loss: 0.3436 - val_accuracy: 0.8333 - lr: 1.0000e-04\n","Epoch 31/50\n","24/24 [==============================] - 73s 3s/step - loss: 0.2389 - accuracy: 0.8955 - val_loss: 0.1630 - val_accuracy: 0.9427 - lr: 1.0000e-04\n","Epoch 32/50\n","24/24 [==============================] - 75s 3s/step - loss: 0.1748 - accuracy: 0.9254 - val_loss: 0.1719 - val_accuracy: 0.9323 - lr: 1.0000e-04\n","Epoch 33/50\n","24/24 [==============================] - 77s 3s/step - loss: 0.1749 - accuracy: 0.9254 - val_loss: 0.2024 - val_accuracy: 0.9219 - lr: 1.0000e-04\n","Epoch 34/50\n","24/24 [==============================] - 72s 3s/step - loss: 0.2100 - accuracy: 0.8996 - val_loss: 0.1522 - val_accuracy: 0.9323 - lr: 1.0000e-04\n","Epoch 35/50\n","24/24 [==============================] - 79s 3s/step - loss: 0.1667 - accuracy: 0.9322 - val_loss: 0.1364 - val_accuracy: 0.9375 - lr: 1.0000e-04\n","Epoch 36/50\n","24/24 [==============================] - 71s 3s/step - loss: 0.1601 - accuracy: 0.9335 - val_loss: 0.1340 - val_accuracy: 0.9427 - lr: 1.0000e-04\n","Epoch 37/50\n","24/24 [==============================] - 77s 3s/step - loss: 0.1797 - accuracy: 0.9213 - val_loss: 0.1560 - val_accuracy: 0.9323 - lr: 1.0000e-04\n","Epoch 38/50\n","24/24 [==============================] - 77s 3s/step - loss: 0.1834 - accuracy: 0.9091 - val_loss: 0.1442 - val_accuracy: 0.9479 - lr: 1.0000e-04\n","Epoch 39/50\n","24/24 [==============================] - 80s 3s/step - loss: 0.1621 - accuracy: 0.9322 - val_loss: 0.1423 - val_accuracy: 0.9479 - lr: 1.0000e-04\n","Epoch 40/50\n","24/24 [==============================] - ETA: 0s - loss: 0.1816 - accuracy: 0.9186\n","Epoch 40: ReduceLROnPlateau reducing learning rate to 1.0000000474974514e-05.\n","24/24 [==============================] - 69s 3s/step - loss: 0.1816 - accuracy: 0.9186 - val_loss: 0.1587 - val_accuracy: 0.9375 - lr: 1.0000e-04\n","Epoch 41/50\n","24/24 [==============================] - 78s 3s/step - loss: 0.1608 - accuracy: 0.9294 - val_loss: 0.1421 - val_accuracy: 0.9375 - lr: 1.0000e-05\n","Epoch 42/50\n","24/24 [==============================] - 70s 3s/step - loss: 0.1660 - accuracy: 0.9267 - val_loss: 0.1325 - val_accuracy: 0.9427 - lr: 1.0000e-05\n","Epoch 43/50\n","24/24 [==============================] - 80s 3s/step - loss: 0.1699 - accuracy: 0.9267 - val_loss: 0.1313 - val_accuracy: 0.9427 - lr: 1.0000e-05\n","Epoch 44/50\n","24/24 [==============================] - 70s 3s/step - loss: 0.1550 - accuracy: 0.9254 - val_loss: 0.1316 - val_accuracy: 0.9323 - lr: 1.0000e-05\n","Epoch 45/50\n","24/24 [==============================] - 70s 3s/step - loss: 0.1578 - accuracy: 0.9254 - val_loss: 0.1313 - val_accuracy: 0.9323 - lr: 1.0000e-05\n","Epoch 46/50\n","24/24 [==============================] - 72s 3s/step - loss: 0.1536 - accuracy: 0.9322 - val_loss: 0.1306 - val_accuracy: 0.9323 - lr: 1.0000e-05\n","Epoch 47/50\n","24/24 [==============================] - 77s 3s/step - loss: 0.1479 - accuracy: 0.9349 - val_loss: 0.1293 - val_accuracy: 0.9427 - lr: 1.0000e-05\n","Epoch 48/50\n","24/24 [==============================] - 78s 3s/step - loss: 0.1751 - accuracy: 0.9172 - val_loss: 0.1287 - val_accuracy: 0.9427 - lr: 1.0000e-05\n","Epoch 49/50\n","24/24 [==============================] - 71s 3s/step - loss: 0.1624 - accuracy: 0.9254 - val_loss: 0.1284 - val_accuracy: 0.9427 - lr: 1.0000e-05\n","Epoch 50/50\n","24/24 [==============================] - 72s 3s/step - loss: 0.1528 - accuracy: 0.9349 - val_loss: 0.1280 - val_accuracy: 0.9427 - lr: 1.0000e-05\n","\n","Required time:  1:03:26.388307\n","\n"]}],"source":["init_time = datetime.datetime.now()\n","\n","\n","train_steps = train_generator.samples // BATCH_SIZE\n","valid_steps = test_generator.samples // BATCH_SIZE\n","\n","early_stopping = EarlyStopping(monitor=\"val_loss\", patience=8, mode=\"min\")\n","checkpoint = ModelCheckpoint(\"loss-{val_loss:.4f}.h5\", monitor=\"val_loss\", verbose=0,\n","                             save_best_only=True, save_weights_only=True, mode=\"min\")\n","learning_rate_reduction = ReduceLROnPlateau(monitor=\"val_loss\", factor=0.1, patience=4,\n","                                            min_lr=1e-7, verbose=1, mode=\"min\")\n","history = model.fit(\n","    train_generator,\n","    validation_data=test_generator,\n","    batch_size=BATCH_SIZE,\n","    epochs=50,\n","    steps_per_epoch=train_steps,\n","    validation_steps=valid_steps,\n","    callbacks=[\n","                checkpoint,\n","                early_stopping,\n","                learning_rate_reduction],\n","    verbose=1,\n","    )\n","requared_time = datetime.datetime.now() - init_time\n","print(f'\\nRequired time:  {str(requared_time)}\\n')"]},{"cell_type":"code","source":["history_df = pd.DataFrame(history.history)\n","history_df.loc[0:, ['loss', 'val_loss']].plot()\n","print(\"Minimum Loss: {:0.4f}\".format(history_df['loss'].min()));\n","print(\"Minimum Validation Loss: {:0.4f}\".format(history_df['val_loss'].min()));\n","\n","history_df.loc[0:, ['accuracy', 'val_accuracy']].plot()\n","print(\"Maksimum Accuracy: {:0.4f}\".format(history_df['accuracy'].max()));\n","print(\"Maksimum Validation Accuracy: {:0.4f}\".format(history_df['val_accuracy'].max()));"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":912},"id":"o8I9zNqTPEv6","outputId":"f3edab20-401b-44c8-c324-cf53d11ab0d9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Minimum Loss: 0.1479\n","Minimum Validation Loss: 0.1280\n","Maksimum Accuracy: 0.9349\n","Maksimum Validation Accuracy: 0.9479\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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D9qeP3bsGNdeey0xMTGEhoYyevRoNm7caHv+q6++YsyYMRgMBmJjY5k6dartOY1GwxdffNHoelFRUbz55psAHDlyBI1Gw/Llyxk/fjwGg4H33nuPwsJCrr32WpKTkwkJCWHIkCF88MEHjc5jsVh46qmn6NOnD0FBQXTv3p3HH38cgIkTJzJ79uxGx+fn56PX6xsVk/g7r/QZ8XtSTSOE6MQURaGqxuz16wYH6hyq1KioqGDOnDkMHTqU8vJy5s+fz9SpU9m6dSuVlZWMHz+e5ORkvvzySxISEtiyZQsWiwWAFStWMHXqVB588EHefvttTCYT33zzjcNjnjt3Ls888wwjRozAYDBQXV3NqFGjeOCBB4iIiGDFihXceOON9O7dm7FjxwJqb61XXnmFZ599lrPOOovs7GxbI9FbbrmF2bNn88wzz9haXrz77rskJyczceJEh8fXXkkwYg9ZphFCdGJVNWYGzvf+5qa7Hp1MiN7+j6krrrii0fevv/46Xbt2ZdeuXaxbt478/Hx+/fVXYmJiAGz9rwAef/xxrrnmmkbdv4cNG+bwmO+55x4uv/zyRo/dd999tvt33XUX3333HR999BFjx46lrKyM5557jhdeeIEZM2YA0Lt3b8466ywALr/8cmbPns1///tfrr76agDefPNN/vznP3eo8mtZprGHLNMIIUS7t3//fq699lp69epFREQEqampgFrluXXrVkaMGGELRE61detWzj33XJfHMHr06Ebfm81mHnvsMYYMGUJMTAxhYWF89913ZGZmArB7926MRmOL1zYYDNx44428/vrrAGzZsoUdO3bw5z//2eWxticyM2IPawdWWaYRQnRCwYE6dj062SfXdcSUKVPo0aMHr7zyCklJSVgsFgYPHozJZLK1LW/xWm08r9FoOLX4tLkE1dDQxluGPP300zz33HMsWbKEIUOGEBoayj333IPJZLLruqAu1QwfPpxjx47xxhtvMHHiRHr06NHm6/yJzIzYo8a6Y68s0wghOh+NRkOIPsDrN0eWIQoLC9m7dy8PPfQQ5557LgMGDODkyZO254cOHcrWrVspKipq9vVDhw5tNSG0a9euZGdn277fv38/lZWVbY5r7dq1XHrppdxwww0MGzaMXr16sW/fPtvzffv2JTg4uNVrDxkyhNGjR/PKK6/w/vvvc9NNN7V5XX8jwYg9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pUsXwsLCuOKKK8jNzfXRiP3bSy+9xNChQ23Nn9LT0/n2229tz8t77TmLFi1Co9Fwzz332B6T99u9/vGPf6DRaBrd+vfvb3veU+93pw1Gli9fzpw5c1iwYAFbtmxh2LBhTJ48mby8PF8Pze9VVFQwbNgwli5d2uzzTz31FM8//zzLli1j48aNhIaGMnnyZKqrq7080o5h9erVzJo1iw0bNvDDDz9QU1PD+eefT0VFhe2Ye++9l6+++oqPP/6Y1atXc+LECS6//HIfjtp/devWjUWLFrF582Z+++03Jk6cyKWXXsrOnTsBea895ddff+U///kPQ4cObfS4vN/uN2jQILKzs223NWvW2J7z2PutdFJjx45VZs2aZfvebDYrSUlJysKFC304qo4HUD7//HPb9xaLRUlISFCefvpp22PFxcVKUFCQ8sEHH/hghB1PXl6eAiirV69WFEV9fwMDA5WPP/7Ydszu3bsVQFm/fr2vhtmhREdHK6+++qq81x5SVlam9O3bV/nhhx+U8ePHK3fffbeiKPK77QkLFixQhg0b1uxznny/O+XMiMlkYvPmzUyaNMn2mFarZdKkSaxfv96HI+v4Dh8+TE5OTqP3PjIykrS0NHnv3aSkpASAmJgYADZv3kxNTU2j97x///50795d3nMXmc1mPvzwQyoqKkhPT5f32kNmzZrFxRdf3Oh9Bfnd9pT9+/eTlJREr169uP7668nMzAQ8+377xUZ57lZQUIDZbCY+Pr7R4/Hx8ezZs8dHo+occnJyAJp9763PCedZLBbuuecezjzzTAYPHgyo77lerycqKqrRsfKeO2/79u2kp6dTXV1NWFgYn3/+OQMHDmTr1q3yXrvZhx9+yJYtW/j111+bPCe/2+6XlpbGm2++Sb9+/cjOzuaRRx5h3Lhx7Nixw6Pvd6cMRoToqGbNmsWOHTsarfEK9+vXrx9bt26lpKSETz75hBkzZrB69WpfD6vDycrK4u677+aHH37AYDD4ejidwoUXXmi7P3ToUNLS0ujRowcfffQRwcHBHrtup1ymiY2NRafTNckAzs3NJSEhwUej6hys76+89+43e/Zsvv76a3766Se6detmezwhIQGTyURxcXGj4+U9d55er6dPnz6MGjWKhQsXMmzYMJ577jl5r91s8+bN5OXlMXLkSAICAggICGD16tU8//zzBAQEEB8fL++3h0VFRXHaaadx4MABj/5+d8pgRK/XM2rUKDIyMmyPWSwWMjIySE9P9+HIOr6ePXuSkJDQ6L0vLS1l48aN8t47SVEUZs+ezeeff86PP/5Iz549Gz0/atQoAgMDG73ne/fuJTMzU95zN7FYLBiNRnmv3ezcc89l+/btbN261XYbPXo0119/ve2+vN+eVV5ezsGDB0lMTPTs77dL6a9+7MMPP1SCgoKUN998U9m1a5fyl7/8RYmKilJycnJ8PTS/V1ZWpvz+++/K77//rgDK4sWLld9//105evSooiiKsmjRIiUqKkr573//q2zbtk259NJLlZ49eypVVVU+Hrl/uuOOO5TIyEhl1apVSnZ2tu1WWVlpO+b2229Xunfvrvz444/Kb7/9pqSnpyvp6ek+HLX/mjt3rrJ69Wrl8OHDyrZt25S5c+cqGo1G+f777xVFkffa0xpW0yiKvN/u9te//lVZtWqVcvjwYWXt2rXKpEmTlNjYWCUvL09RFM+93502GFEURfn3v/+tdO/eXdHr9crYsWOVDRs2+HpIHcJPP/2kAE1uM2bMUBRFLe99+OGHlfj4eCUoKEg599xzlb179/p20H6sufcaUN544w3bMVVVVcqdd96pREdHKyEhIcrUqVOV7Oxs3w3aj910001Kjx49FL1er3Tt2lU599xzbYGIosh77WmnBiPyfrvXtGnTlMTEREWv1yvJycnKtGnTlAMHDtie99T7rVEURXFtbkUIIYQQwnmdMmdECCGEEO2HBCNCCCGE8CkJRoQQQgjhUxKMCCGEEMKnJBgRQgghhE9JMCKEEEIIn5JgRAghhBA+JcGIEEIIIXxKghEhhBBC+JQEI0IIIYTwKQlGhBBCCOFTEowIIYQQwqf+H3L/2UEMN7uTAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"code","source":["test_steps = test_generator.samples // BATCH_SIZE\n","\n","test_loss, test_acc = model.evaluate(test_generator, steps=test_steps)\n","print('\\naccuracy:', test_acc, 'loss: ',test_loss)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TsKo0NJHP-MC","outputId":"4616164a-f794-4b2b-eb4b-0ecf6e4706f4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["6/6 [==============================] - 13s 2s/step - loss: 0.1280 - accuracy: 0.9427\n","\n","accuracy: 0.9427083134651184 loss:  0.12796182930469513\n"]}]},{"cell_type":"code","source":["predict = model.predict(test_generator, steps=test_steps)\n","y_hat = np.argmax(predict, axis=1)\n","y_hat[:20]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ILcYmBRYQgiK","outputId":"ca84547a-add2-4d96-a3bb-e40f71c75e6c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["6/6 [==============================] - 12s 2s/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([1, 1, 0, 0, 2, 1, 0, 1, 2, 1, 0, 2, 2, 0, 0, 1, 0, 3, 1, 0])"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","source":["test_labels_df = pd.DataFrame()\n","test_labels_df[['class']] = test_data[['class']]\n","\n","change = {\n","'0' : 0,\n","'1' : 1,\n","'2' : 2,\n","'3' : 3,\n","}\n","\n","test_labels_df['class'] = test_labels_df['class'].map(change)\n","test_labels_df = test_labels_df[ : test_steps*BATCH_SIZE]\n","\n","\n","y_test = np.array(test_labels_df['class'])\n","y_test[:20]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6-7A-pH5QiYg","outputId":"82d46f69-add7-4642-8249-5fe831d6b711"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 3, 0, 0, 2, 1, 0, 1, 2, 3, 0, 2, 2, 0, 0, 1, 0, 3, 1, 0])"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["print(classification_report(y_test, y_hat), '\\n')\n","cm = confusion_matrix(y_test, y_hat)\n","sns.heatmap(cm, annot=True, cmap=\"Blues\", fmt='.0f', cbar=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":656},"id":"-QwGQLqfQkw2","outputId":"80678de3-f20c-41e3-de4d-9c353e6187b0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       0.99      1.00      1.00       123\n","           1       0.76      1.00      0.86        32\n","           2       1.00      1.00      1.00        22\n","           3       1.00      0.27      0.42        15\n","\n","    accuracy                           0.94       192\n","   macro avg       0.94      0.82      0.82       192\n","weighted avg       0.96      0.94      0.93       192\n"," \n","\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":25},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["train_datagen = ImageDataGenerator(rescale=1./255,\n","                                    rotation_range=40,\n","                                    width_shift_range=0.2,\n","                                    height_shift_range=0.2,\n","                                    shear_range=0.2,\n","                                    zoom_range=0.2,\n","                                    horizontal_flip=True,\n","                                    fill_mode='nearest')\n","\n","train_generator = train_datagen.flow_from_dataframe(\n","                  train_data,\n","                  x_col=\"filename\",\n","                  y_col=\"class\",\n","                  target_size=(IM_HEIGHT, IM_WIDTH),\n","                  class_mode='categorical',\n","                  # batch_size= BATCH_SIZE,\n","                  color_mode='rgb',\n","                  shuffle=False,\n","                  num_parallel_calls=AUTOTUNE)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tZoJ3wQgrXBo","outputId":"a407abd3-c53a-4c52-960d-3c38b9e954e6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 769 validated image filenames belonging to 4 classes.\n"]}]},{"cell_type":"code","source":["train_steps = train_generator.samples // BATCH_SIZE\n","\n","y_train_pred_proba = model.predict(train_generator)\n","y_train_pred = np.argmax(y_train_pred_proba, axis=1)\n","y_train_true = train_generator.classes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oIT3YdXQraRy","outputId":"2cc8f3af-e14a-4160-d276-55da6f6c186f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["25/25 [==============================] - 58s 2s/step\n"]}]},{"cell_type":"code","source":["train_report = classification_report(y_train_true, y_train_pred)\n","print(\"Classification Report for Training Data:\")\n","print(train_report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"La70bBlgrdJ7","outputId":"e68ac376-7bdc-48b1-eeaf-7ca1cf3aa346"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report for Training Data:\n","              precision    recall  f1-score   support\n","\n","           0       0.99      1.00      1.00       489\n","           1       0.75      0.99      0.86       130\n","           2       1.00      1.00      1.00        91\n","           3       0.93      0.24      0.38        59\n","\n","    accuracy                           0.94       769\n","   macro avg       0.92      0.81      0.81       769\n","weighted avg       0.95      0.94      0.93       769\n","\n"]}]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}