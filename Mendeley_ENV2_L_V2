{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["Import Library"],"metadata":{"id":"0uR9Hp4G1fdI"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HU19gMal1MK6","outputId":"8acd6858-38eb-4fc1-b00a-572d7946192c"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras\n","  Downloading keras-3.4.1-py3-none-any.whl (1.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.1/1.1 MB\u001b[0m \u001b[31m6.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting absl-py (from keras)\n","  Downloading absl_py-2.1.0-py3-none-any.whl (133 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m133.7/133.7 kB\u001b[0m \u001b[31m8.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting numpy (from keras)\n","  Downloading numpy-2.0.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (19.5 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m19.5/19.5 MB\u001b[0m \u001b[31m14.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting rich (from keras)\n","  Downloading rich-13.7.1-py3-none-any.whl (240 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m240.7/240.7 kB\u001b[0m \u001b[31m9.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting namex (from keras)\n","  Downloading namex-0.0.8-py3-none-any.whl (5.8 kB)\n","Collecting h5py (from keras)\n","  Downloading h5py-3.11.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.3 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.3/5.3 MB\u001b[0m \u001b[31m22.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting optree (from keras)\n","  Downloading optree-0.12.1-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (347 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m347.7/347.7 kB\u001b[0m \u001b[31m12.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting ml-dtypes (from keras)\n","  Downloading ml_dtypes-0.4.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.2/2.2 MB\u001b[0m \u001b[31m30.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting packaging (from keras)\n","  Downloading packaging-24.1-py3-none-any.whl (53 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.0/54.0 kB\u001b[0m \u001b[31m4.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting typing-extensions>=4.5.0 (from optree->keras)\n","  Downloading typing_extensions-4.12.2-py3-none-any.whl (37 kB)\n","Collecting markdown-it-py>=2.2.0 (from rich->keras)\n","  Downloading markdown_it_py-3.0.0-py3-none-any.whl (87 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m87.5/87.5 kB\u001b[0m \u001b[31m7.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pygments<3.0.0,>=2.13.0 (from rich->keras)\n","  Downloading pygments-2.18.0-py3-none-any.whl (1.2 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.2/1.2 MB\u001b[0m \u001b[31m34.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting mdurl~=0.1 (from markdown-it-py>=2.2.0->rich->keras)\n","  Downloading mdurl-0.1.2-py3-none-any.whl (10.0 kB)\n","Installing collected packages: namex, typing-extensions, pygments, packaging, numpy, mdurl, absl-py, optree, ml-dtypes, markdown-it-py, h5py, rich, keras\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","ipython 7.34.0 requires jedi>=0.16, which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cublas-cu12==12.1.3.1; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cuda-cupti-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cuda-nvrtc-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cuda-runtime-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cudnn-cu12==8.9.2.26; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cufft-cu12==11.0.2.54; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-curand-cu12==10.3.2.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cusolver-cu12==11.4.5.107; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-cusparse-cu12==12.1.0.106; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-nccl-cu12==2.20.5; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","torch 2.3.1+cu121 requires nvidia-nvtx-cu12==12.1.105; platform_system == \"Linux\" and platform_machine == \"x86_64\", which is not installed.\n","accelerate 0.32.1 requires numpy<2.0.0,>=1.17, but you have numpy 2.0.1 which is incompatible.\n","astropy 5.3.4 requires numpy<2,>=1.21, but you have numpy 2.0.1 which is incompatible.\n","cudf-cu12 24.4.1 requires numpy<2.0a0,>=1.23, but you have numpy 2.0.1 which is incompatible.\n","cupy-cuda12x 12.2.0 requires numpy<1.27,>=1.20, but you have numpy 2.0.1 which is incompatible.\n","ibis-framework 8.0.0 requires numpy<2,>=1, but you have numpy 2.0.1 which is incompatible.\n","numba 0.58.1 requires numpy<1.27,>=1.22, but you have numpy 2.0.1 which is incompatible.\n","rmm-cu12 24.4.0 requires numpy<2.0a0,>=1.23, but you have numpy 2.0.1 which is incompatible.\n","scipy 1.11.4 requires numpy<1.28.0,>=1.21.6, but you have numpy 2.0.1 which is incompatible.\n","tensorflow 2.15.0 requires keras<2.16,>=2.15.0, but you have keras 3.4.1 which is incompatible.\n","tensorflow 2.15.0 requires ml-dtypes~=0.2.0, but you have ml-dtypes 0.4.0 which is incompatible.\n","tensorflow 2.15.0 requires numpy<2.0.0,>=1.23.5, but you have numpy 2.0.1 which is incompatible.\n","thinc 8.2.5 requires numpy<2.0.0,>=1.19.0; python_version >= \"3.9\", but you have numpy 2.0.1 which is incompatible.\n","transformers 4.42.4 requires numpy<2.0,>=1.17, but you have numpy 2.0.1 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed absl-py-2.1.0 h5py-3.11.0 keras-3.4.1 markdown-it-py-3.0.0 mdurl-0.1.2 ml-dtypes-0.4.0 namex-0.0.8 numpy-2.0.1 optree-0.12.1 packaging-24.1 pygments-2.18.0 rich-13.7.1 typing-extensions-4.12.2\n"]}],"source":["!pip install keras -tuner"]},{"cell_type":"code","source":["!pip install keras_tuner"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m19PImr3163V","outputId":"1381e1ee-a0ac-435b-d729-a57c0f55d8a0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting keras_tuner\n","  Downloading keras_tuner-1.4.7-py3-none-any.whl (129 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m129.1/129.1 kB\u001b[0m \u001b[31m1.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: keras in /usr/local/lib/python3.10/dist-packages (from keras_tuner) (2.15.0)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from keras_tuner) (24.1)\n","Requirement already satisfied: requests in /usr/local/lib/python3.10/dist-packages (from keras_tuner) (2.31.0)\n","Collecting kt-legacy (from keras_tuner)\n","  Downloading kt_legacy-1.0.5-py3-none-any.whl (9.6 kB)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (3.7)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (2.0.7)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests->keras_tuner) (2024.7.4)\n","Installing collected packages: kt-legacy, keras_tuner\n","Successfully installed keras_tuner-1.4.7 kt-legacy-1.0.5\n"]}]},{"cell_type":"code","source":["import cv2\n","import datetime\n","import os\n","import numpy as np\n","import pandas as pd\n","import tensorflow as tf\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import tensorflow_hub as hub\n","\n","from sklearn.utils import shuffle\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, recall_score\n","\n","from tensorflow.keras import backend as K\n","from tensorflow.keras import layers\n","from tensorflow.keras import Model, Sequential\n","from tensorflow.keras.utils import plot_model\n","from tensorflow.keras.callbacks import ReduceLROnPlateau, ModelCheckpoint, EarlyStopping\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","#utility & processing\n","from tensorflow.keras import utils\n","from tensorflow.keras.utils import to_categorical\n","from sklearn.model_selection import train_test_split\n","from tensorflow.keras import regularizers\n","\n","#callbacks\n","from tensorflow.keras.callbacks import ModelCheckpoint, EarlyStopping\n","\n","#data augmentation\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","\n","#keras tuner\n","import keras_tuner\n","from keras_tuner import RandomSearch\n","from keras_tuner.engine.hyperparameters import HyperParameters\n","\n","#warnings\n","import warnings\n","warnings.filterwarnings('ignore')"],"metadata":{"id":"1EZIku2w2CXq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install tensorflow-addons\n","import tensorflow_addons as tfa"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GQv_GLie2WJP","outputId":"f5cc2d06-b7de-4c48-8e73-6bf7b8b11962"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting tensorflow-addons\n","  Downloading tensorflow_addons-0.23.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (611 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m611.8/611.8 kB\u001b[0m \u001b[31m6.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from tensorflow-addons) (24.1)\n","Collecting typeguard<3.0.0,>=2.7 (from tensorflow-addons)\n","  Downloading typeguard-2.13.3-py3-none-any.whl (17 kB)\n","Installing collected packages: typeguard, tensorflow-addons\n","Successfully installed tensorflow-addons-0.23.0 typeguard-2.13.3\n"]}]},{"cell_type":"markdown","source":["Download dan Unzip Dataset"],"metadata":{"id":"MLMD1rBr2hxs"}},{"cell_type":"code","source":["# https://drive.google.com/file/d/150855rVh-srkGhdywBsPK4_mHSZCwRWg/view?usp=sharing\n","!gdown 1uBWS1y-K031wvMrVryTQ0-GE1bva89mQ"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B9mYQSSn2bj-","outputId":"f7c3e5be-5025-435d-ea07-28878b7d2ee2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Downloading...\n","From (original): https://drive.google.com/uc?id=1uBWS1y-K031wvMrVryTQ0-GE1bva89mQ\n","From (redirected): https://drive.google.com/uc?id=1uBWS1y-K031wvMrVryTQ0-GE1bva89mQ&confirm=t&uuid=84ddd119-d0af-43f6-866a-d10f84e0937e\n","To: /content/mendeley.zip\n","100% 2.21G/2.21G [00:39<00:00, 56.6MB/s]\n"]}]},{"cell_type":"code","source":["#unzip dataset\n","%%capture\n","!unzip mendeley.zip;"],"metadata":{"id":"R4gs6hKv24yv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IDJgkcFH4IpC","outputId":"abb5dcfd-0485-42e9-c01c-76cb46325b87"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["for dirname, _, filenames in os.walk('/content/mendeley'):\n","    print(dirname)"],"metadata":{"id":"ge_ixJHj4dSS","colab":{"base_uri":"https://localhost:8080/"},"outputId":"55b793a5-8eb6-450d-8560-013c70f1e7e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/mendeley\n","/content/mendeley/Negative for Intraepithelial malignancy\n","/content/mendeley/Low squamous intra-epithelial lesion\n","/content/mendeley/Squamous cell carcinoma\n","/content/mendeley/High squamous intra-epithelial lesion\n"]}]},{"cell_type":"code","source":["filenames = tf.io.gfile.glob('/content/mendeley/*/*')\n","print(len(filenames))\n","filenames[:3]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_zrGYDm-7Z94","outputId":"1d58209f-fdc2-401a-a9f2-dbdec64ed7ef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["963\n"]},{"output_type":"execute_result","data":{"text/plain":["['/content/mendeley/Low squamous intra-epithelial lesion/LSIL_4 (26).jpg',\n"," '/content/mendeley/Low squamous intra-epithelial lesion/LSIL_3 (12).jpg',\n"," '/content/mendeley/Low squamous intra-epithelial lesion/LSIL_4 (15).jpg']"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["data = pd.DataFrame()\n","for el in range(0, len(filenames)):\n","    target = filenames[el].split('/')[-2]\n","    path = filenames[el]\n","\n","    data.loc[el, 'filename'] = path\n","    data.loc[el, 'class'] = target\n","\n","print(data['class'].value_counts(dropna=False))\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":527},"id":"qRoC_07L7hT5","outputId":"239204e9-cd04-4ffa-8212-62e16262bfd6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["class\n","Negative for Intraepithelial malignancy    613\n","High squamous intra-epithelial lesion      163\n","Low squamous intra-epithelial lesion       113\n","Squamous cell carcinoma                     74\n","Name: count, dtype: int64\n"]},{"output_type":"execute_result","data":{"text/plain":["                                              filename  \\\n","0    /content/mendeley/Low squamous intra-epithelia...   \n","1    /content/mendeley/Low squamous intra-epithelia...   \n","2    /content/mendeley/Low squamous intra-epithelia...   \n","3    /content/mendeley/Low squamous intra-epithelia...   \n","4    /content/mendeley/Low squamous intra-epithelia...   \n","..                                                 ...   \n","958  /content/mendeley/Negative for Intraepithelial...   \n","959  /content/mendeley/Negative for Intraepithelial...   \n","960  /content/mendeley/Negative for Intraepithelial...   \n","961  /content/mendeley/Negative for Intraepithelial...   \n","962  /content/mendeley/Negative for Intraepithelial...   \n","\n","                                       class  \n","0       Low squamous intra-epithelial lesion  \n","1       Low squamous intra-epithelial lesion  \n","2       Low squamous intra-epithelial lesion  \n","3       Low squamous intra-epithelial lesion  \n","4       Low squamous intra-epithelial lesion  \n","..                                       ...  \n","958  Negative for Intraepithelial malignancy  \n","959  Negative for Intraepithelial malignancy  \n","960  Negative for Intraepithelial malignancy  \n","961  Negative for Intraepithelial malignancy  \n","962  Negative for Intraepithelial malignancy  \n","\n","[963 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-6fe8c48a-2dbd-4d19-b06b-7251f82eb5a2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>filename</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>958</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>959</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>960</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>961</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>962</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>963 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6fe8c48a-2dbd-4d19-b06b-7251f82eb5a2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6fe8c48a-2dbd-4d19-b06b-7251f82eb5a2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6fe8c48a-2dbd-4d19-b06b-7251f82eb5a2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-394ad488-1d12-4814-825d-356a9d2d5a9f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-394ad488-1d12-4814-825d-356a9d2d5a9f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-394ad488-1d12-4814-825d-356a9d2d5a9f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_48b50fb5-609f-458d-8ab2-f1d7357b58ba\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_48b50fb5-609f-458d-8ab2-f1d7357b58ba button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 963,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 963,\n        \"samples\": [\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_19_ (5).jpg\",\n          \"/content/mendeley/High squamous intra-epithelial lesion/HSIL_5 (6).jpg\",\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_25_ (10).jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Squamous cell carcinoma\",\n          \"Negative for Intraepithelial malignancy\",\n          \"Low squamous intra-epithelial lesion\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["Mengacak Data"],"metadata":{"id":"Y9FEO3F79oqp"}},{"cell_type":"code","source":["data = shuffle(data, random_state=42)\n","data.reset_index(drop=True, inplace=True)\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"83V-80-w7uyc","outputId":"d1b65148-5353-408a-8570-764dc06b4c9f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              filename  \\\n","0    /content/mendeley/Negative for Intraepithelial...   \n","1    /content/mendeley/High squamous intra-epitheli...   \n","2    /content/mendeley/Negative for Intraepithelial...   \n","3    /content/mendeley/Negative for Intraepithelial...   \n","4    /content/mendeley/High squamous intra-epitheli...   \n","..                                                 ...   \n","958  /content/mendeley/Low squamous intra-epithelia...   \n","959  /content/mendeley/High squamous intra-epitheli...   \n","960  /content/mendeley/Negative for Intraepithelial...   \n","961  /content/mendeley/Negative for Intraepithelial...   \n","962  /content/mendeley/Low squamous intra-epithelia...   \n","\n","                                       class  \n","0    Negative for Intraepithelial malignancy  \n","1      High squamous intra-epithelial lesion  \n","2    Negative for Intraepithelial malignancy  \n","3    Negative for Intraepithelial malignancy  \n","4      High squamous intra-epithelial lesion  \n","..                                       ...  \n","958     Low squamous intra-epithelial lesion  \n","959    High squamous intra-epithelial lesion  \n","960  Negative for Intraepithelial malignancy  \n","961  Negative for Intraepithelial malignancy  \n","962     Low squamous intra-epithelial lesion  \n","\n","[963 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-7adb3417-093e-4dbc-b886-10625f5c106b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>filename</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>High squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>High squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>958</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>959</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>High squamous intra-epithelial lesion</td>\n","    </tr>\n","    <tr>\n","      <th>960</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>961</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>Negative for Intraepithelial malignancy</td>\n","    </tr>\n","    <tr>\n","      <th>962</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>Low squamous intra-epithelial lesion</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>963 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7adb3417-093e-4dbc-b886-10625f5c106b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7adb3417-093e-4dbc-b886-10625f5c106b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7adb3417-093e-4dbc-b886-10625f5c106b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8538308b-cae4-4038-b217-e9bb80a3d67f\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8538308b-cae4-4038-b217-e9bb80a3d67f')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8538308b-cae4-4038-b217-e9bb80a3d67f button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_9844c133-4373-4db1-bc8e-2d69ee5e4e44\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_9844c133-4373-4db1-bc8e-2d69ee5e4e44 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 963,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 963,\n        \"samples\": [\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_32_ (15).jpg\",\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_40_ (5).jpg\",\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_26_ (15).jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"High squamous intra-epithelial lesion\",\n          \"Squamous cell carcinoma\",\n          \"Negative for Intraepithelial malignancy\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["change = {\n","'Negative for Intraepithelial malignancy' : '0',\n","'High squamous intra-epithelial lesion': '1',\n","'Low squamous intra-epithelial lesion' : '2',\n","'Squamous cell carcinoma' : '3',\n","}\n","\n","data['class'] = data['class'].map(change)\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":423},"id":"Wii1j03_71F9","outputId":"813bf2b2-0815-4d90-a808-192b5166fd8a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              filename class\n","0    /content/mendeley/Negative for Intraepithelial...     0\n","1    /content/mendeley/High squamous intra-epitheli...     1\n","2    /content/mendeley/Negative for Intraepithelial...     0\n","3    /content/mendeley/Negative for Intraepithelial...     0\n","4    /content/mendeley/High squamous intra-epitheli...     1\n","..                                                 ...   ...\n","958  /content/mendeley/Low squamous intra-epithelia...     2\n","959  /content/mendeley/High squamous intra-epitheli...     1\n","960  /content/mendeley/Negative for Intraepithelial...     0\n","961  /content/mendeley/Negative for Intraepithelial...     0\n","962  /content/mendeley/Low squamous intra-epithelia...     2\n","\n","[963 rows x 2 columns]"],"text/html":["\n","  <div id=\"df-0bfbb32e-89ad-47bb-bdfb-e59d9e033b24\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>filename</th>\n","      <th>class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>958</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>959</th>\n","      <td>/content/mendeley/High squamous intra-epitheli...</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>960</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>961</th>\n","      <td>/content/mendeley/Negative for Intraepithelial...</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>962</th>\n","      <td>/content/mendeley/Low squamous intra-epithelia...</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>963 rows × 2 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0bfbb32e-89ad-47bb-bdfb-e59d9e033b24')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0bfbb32e-89ad-47bb-bdfb-e59d9e033b24 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0bfbb32e-89ad-47bb-bdfb-e59d9e033b24');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7242f715-14ec-4e98-9012-940b6a1de357\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7242f715-14ec-4e98-9012-940b6a1de357')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7242f715-14ec-4e98-9012-940b6a1de357 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_72e7d78e-0f26-413e-9746-ddcf3306f32d\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('data')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_72e7d78e-0f26-413e-9746-ddcf3306f32d button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('data');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"data","summary":"{\n  \"name\": \"data\",\n  \"rows\": 963,\n  \"fields\": [\n    {\n      \"column\": \"filename\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 963,\n        \"samples\": [\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_32_ (15).jpg\",\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_40_ (5).jpg\",\n          \"/content/mendeley/Negative for Intraepithelial malignancy/NL_26_ (15).jpg\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"class\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"1\",\n          \"3\",\n          \"0\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["indexes=[]\n","\n","def func(x):\n","    if x[-4:] != '.jpg':\n","        idx = data[data['filename'] == x].index\n","        indexes.append(idx[0])\n","        print(idx[0], x)\n","    return x\n","\n","data['filename'].map(func)\n","\n","print(data.shape)\n","data.drop(index=indexes, axis=0, inplace=True)\n","data.reset_index(drop=True, inplace=True)\n","print(data.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pUCYXEOl9upI","outputId":"016dabb1-ec4d-426a-d5c2-5920090bd136"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["790 /content/mendeley/Negative for Intraepithelial malignancy/Results.csv\n","(963, 2)\n","(962, 2)\n"]}]},{"cell_type":"code","source":["for el in range(100, 120):\n","    path = data.loc[el, 'filename']\n","    img  = cv2.imread(path)\n","    print(img.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6AkWI9y09zEU","outputId":"810fd503-c886-48a6-d05f-ae05894272fd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n","(1536, 2048, 3)\n"]}]},{"cell_type":"markdown","source":["Membagi Dataset"],"metadata":{"id":"Va6jjHdT-BoR"}},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","\n","# Menghapus baris dengan nilai NaN pada kolom 'class'\n","data_cleaned = data.dropna(subset=['class'])\n","\n","# Melakukan split data menjadi train dan test set\n","train_data, test_data = train_test_split(data_cleaned, test_size=0.2, random_state=42, stratify=data_cleaned['class'])\n","\n","print(train_data['class'].value_counts(dropna=False))\n","print(test_data['class'].value_counts(dropna=False))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hp8OBS58M5uZ","outputId":"1f49ffe8-4d01-4137-eae5-4a081626a711"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["class\n","0    489\n","1    130\n","2     91\n","3     59\n","Name: count, dtype: int64\n","class\n","0    123\n","1     33\n","2     22\n","3     15\n","Name: count, dtype: int64\n"]}]},{"cell_type":"markdown","source":["Augmentasi Data"],"metadata":{"id":"PJoHLBwA_fsw"}},{"cell_type":"code","source":["BATCH_SIZE = 32\n","EPOCHS = 50\n","IM_HEIGHT = 224\n","IM_WIDTH = 224\n","\n","AUTOTUNE = tf.data.experimental.AUTOTUNE\n","\n","tf.random.set_seed(999)"],"metadata":{"id":"7TDyUrDeMm98"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_datagen = ImageDataGenerator(rescale=1./255,\n","                                    rotation_range=40,\n","                                    width_shift_range=0.2,\n","                                    height_shift_range=0.2,\n","                                    horizontal_flip=True,\n","                                    fill_mode='nearest')\n","\n","train_generator = train_datagen.flow_from_dataframe(\n","                  train_data,\n","                  x_col=\"filename\",\n","                  y_col=\"class\",\n","                  target_size=(IM_HEIGHT, IM_WIDTH),\n","                  class_mode='categorical',\n","                  batch_size= BATCH_SIZE,\n","                  color_mode='rgb',\n","                  shuffle=True,\n","                  num_parallel_calls=AUTOTUNE)\n","\n","test_datagen = ImageDataGenerator(rescale=1./255)\n","\n","test_generator = test_datagen.flow_from_dataframe(\n","                 test_data,\n","                 x_col=\"filename\",\n","                 y_col=\"class\",\n","                 target_size=(IM_HEIGHT, IM_WIDTH),\n","                 class_mode='categorical',\n","                 batch_size= BATCH_SIZE,\n","                 color_mode='rgb',\n","                 shuffle=False,\n","                 num_parallel_calls=AUTOTUNE)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nNHZizHB-Jpb","outputId":"f50e1ee1-8fb0-4b97-ba97-3a5586f591e4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 769 validated image filenames belonging to 4 classes.\n","Found 193 validated image filenames belonging to 4 classes.\n"]}]},{"cell_type":"markdown","source":["Arsitektur Model"],"metadata":{"id":"Wm7I7_iZA3FL"}},{"cell_type":"code","source":["# Menggunakan URL model EfficientNetV2 dari TensorFlow Hub\n","efficientnet_url = \"https://tfhub.dev/google/imagenet/efficientnet_v2_imagenet1k_l/feature_vector/2\"\n","\n","# Membuat model menggunakan EfficientNetV2 dari TensorFlow Hub\n","trf_lr_efficientnet_model = tf.keras.Sequential([\n","    hub.KerasLayer(efficientnet_url, trainable=False),\n","    tf.keras.layers.Dense(512, activation='relu'),\n","    tf.keras.layers.Dense(4, activation='softmax')\n","])\n","trf_lr_efficientnet_model.build([None, IM_HEIGHT, IM_WIDTH, 3])\n","\n","# Mengompilasi model\n","\n","trf_lr_efficientnet_model.compile(\n","    optimizer='adam',\n","    loss='categorical_crossentropy',\n","    metrics='accuracy'\n",")\n","trf_lr_efficientnet_model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"APoY5JySAZ_H","outputId":"ba5977ce-3bb4-410d-c7a5-9b42b0c3f4f7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_2\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," keras_layer_2 (KerasLayer)  (None, 1280)              117746848 \n","                                                                 \n"," dense_4 (Dense)             (None, 512)               655872    \n","                                                                 \n"," dense_5 (Dense)             (None, 4)                 2052      \n","                                                                 \n","=================================================================\n","Total params: 118404772 (451.68 MB)\n","Trainable params: 657924 (2.51 MB)\n","Non-trainable params: 117746848 (449.17 MB)\n","_________________________________________________________________\n"]}]},{"cell_type":"code","source":["init_time = datetime.datetime.now()\n","\n","\n","train_steps = train_generator.samples // BATCH_SIZE\n","valid_steps = test_generator.samples // BATCH_SIZE\n","\n","early_stopping = EarlyStopping(monitor=\"val_loss\", patience=8, mode=\"min\")\n","checkpoint = ModelCheckpoint(\"loss-{val_loss:.4f}.h5\", monitor=\"val_loss\", verbose=0,\n","                             save_best_only=True, save_weights_only=True, mode=\"min\")\n","learning_rate_reduction = ReduceLROnPlateau(monitor=\"val_loss\", factor=0.1, patience=4,\n","                                            min_lr=1e-7, verbose=1, mode=\"min\")\n","history = trf_lr_efficientnet_model.fit(\n","    train_generator,\n","    validation_data=test_generator,\n","    batch_size=BATCH_SIZE,\n","    epochs=EPOCHS,\n","    steps_per_epoch=train_steps,\n","    validation_steps=valid_steps,\n","    callbacks=[\n","                checkpoint,\n","                early_stopping,\n","                learning_rate_reduction],\n","    verbose=1,\n","    )\n","requared_time = datetime.datetime.now() - init_time\n","print(f'\\nRequired time:  {str(requared_time)}\\n')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lRG13pouBLlp","outputId":"06d5835c-5e5a-46f0-ccfa-3c2230d0aaa1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","24/24 [==============================] - 116s 3s/step - loss: 0.6326 - accuracy: 0.7639 - val_loss: 0.3919 - val_accuracy: 0.8698 - lr: 0.0010\n","Epoch 2/50\n","24/24 [==============================] - 65s 3s/step - loss: 0.2517 - accuracy: 0.9145 - val_loss: 0.3022 - val_accuracy: 0.8958 - lr: 0.0010\n","Epoch 3/50\n","24/24 [==============================] - 74s 3s/step - loss: 0.1925 - accuracy: 0.9281 - val_loss: 0.2555 - val_accuracy: 0.9010 - lr: 0.0010\n","Epoch 4/50\n","24/24 [==============================] - 69s 3s/step - loss: 0.1629 - accuracy: 0.9322 - val_loss: 0.1913 - val_accuracy: 0.9427 - lr: 0.0010\n","Epoch 5/50\n","24/24 [==============================] - 68s 3s/step - loss: 0.1346 - accuracy: 0.9484 - val_loss: 0.1566 - val_accuracy: 0.9635 - lr: 0.0010\n","Epoch 6/50\n","24/24 [==============================] - 64s 3s/step - loss: 0.1233 - accuracy: 0.9607 - val_loss: 0.1562 - val_accuracy: 0.9427 - lr: 0.0010\n","Epoch 7/50\n","24/24 [==============================] - 66s 3s/step - loss: 0.0991 - accuracy: 0.9620 - val_loss: 0.1479 - val_accuracy: 0.9531 - lr: 0.0010\n","Epoch 8/50\n","24/24 [==============================] - 65s 3s/step - loss: 0.1135 - accuracy: 0.9579 - val_loss: 0.1239 - val_accuracy: 0.9635 - lr: 0.0010\n","Epoch 9/50\n","24/24 [==============================] - 63s 3s/step - loss: 0.0837 - accuracy: 0.9674 - val_loss: 0.1055 - val_accuracy: 0.9740 - lr: 0.0010\n","Epoch 10/50\n","24/24 [==============================] - 64s 3s/step - loss: 0.0797 - accuracy: 0.9715 - val_loss: 0.1048 - val_accuracy: 0.9792 - lr: 0.0010\n","Epoch 11/50\n","24/24 [==============================] - 63s 3s/step - loss: 0.0755 - accuracy: 0.9783 - val_loss: 0.1056 - val_accuracy: 0.9740 - lr: 0.0010\n","Epoch 12/50\n","24/24 [==============================] - 61s 3s/step - loss: 0.0988 - accuracy: 0.9634 - val_loss: 0.1071 - val_accuracy: 0.9688 - lr: 0.0010\n","Epoch 13/50\n","24/24 [==============================] - 63s 3s/step - loss: 0.0684 - accuracy: 0.9729 - val_loss: 0.0874 - val_accuracy: 0.9844 - lr: 0.0010\n","Epoch 14/50\n","24/24 [==============================] - 64s 3s/step - loss: 0.0660 - accuracy: 0.9742 - val_loss: 0.0860 - val_accuracy: 0.9740 - lr: 0.0010\n","Epoch 15/50\n","24/24 [==============================] - 64s 3s/step - loss: 0.0702 - accuracy: 0.9769 - val_loss: 0.1376 - val_accuracy: 0.9427 - lr: 0.0010\n","Epoch 16/50\n","24/24 [==============================] - 61s 3s/step - loss: 0.0562 - accuracy: 0.9796 - val_loss: 0.1106 - val_accuracy: 0.9635 - lr: 0.0010\n","Epoch 17/50\n","24/24 [==============================] - 60s 3s/step - loss: 0.0496 - accuracy: 0.9864 - val_loss: 0.0924 - val_accuracy: 0.9635 - lr: 0.0010\n","Epoch 18/50\n","24/24 [==============================] - ETA: 0s - loss: 0.0520 - accuracy: 0.9824\n","Epoch 18: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n","24/24 [==============================] - 62s 3s/step - loss: 0.0520 - accuracy: 0.9824 - val_loss: 0.0996 - val_accuracy: 0.9583 - lr: 0.0010\n","Epoch 19/50\n","24/24 [==============================] - 62s 3s/step - loss: 0.0579 - accuracy: 0.9837 - val_loss: 0.0882 - val_accuracy: 0.9740 - lr: 1.0000e-04\n","Epoch 20/50\n","24/24 [==============================] - 77s 3s/step - loss: 0.0340 - accuracy: 0.9919 - val_loss: 0.0818 - val_accuracy: 0.9844 - lr: 1.0000e-04\n","Epoch 21/50\n","24/24 [==============================] - 62s 3s/step - loss: 0.0359 - accuracy: 0.9891 - val_loss: 0.0826 - val_accuracy: 0.9844 - lr: 1.0000e-04\n","Epoch 22/50\n","24/24 [==============================] - 66s 3s/step - loss: 0.0250 - accuracy: 0.9932 - val_loss: 0.0774 - val_accuracy: 0.9896 - lr: 1.0000e-04\n","Epoch 23/50\n","24/24 [==============================] - 74s 3s/step - loss: 0.0419 - accuracy: 0.9810 - val_loss: 0.0733 - val_accuracy: 0.9844 - lr: 1.0000e-04\n","Epoch 24/50\n","24/24 [==============================] - 82s 3s/step - loss: 0.0424 - accuracy: 0.9844 - val_loss: 0.0717 - val_accuracy: 0.9844 - lr: 1.0000e-04\n","Epoch 25/50\n","24/24 [==============================] - 60s 3s/step - loss: 0.0383 - accuracy: 0.9864 - val_loss: 0.0725 - val_accuracy: 0.9792 - lr: 1.0000e-04\n","Epoch 26/50\n","24/24 [==============================] - 65s 3s/step - loss: 0.0401 - accuracy: 0.9824 - val_loss: 0.0743 - val_accuracy: 0.9792 - lr: 1.0000e-04\n","Epoch 27/50\n","24/24 [==============================] - 62s 3s/step - loss: 0.0590 - accuracy: 0.9824 - val_loss: 0.0728 - val_accuracy: 0.9740 - lr: 1.0000e-04\n","Epoch 28/50\n","24/24 [==============================] - ETA: 0s - loss: 0.0296 - accuracy: 0.9946\n","Epoch 28: ReduceLROnPlateau reducing learning rate to 1.0000000474974514e-05.\n","24/24 [==============================] - 61s 3s/step - loss: 0.0296 - accuracy: 0.9946 - val_loss: 0.0794 - val_accuracy: 0.9740 - lr: 1.0000e-04\n","Epoch 29/50\n","24/24 [==============================] - 71s 3s/step - loss: 0.0361 - accuracy: 0.9919 - val_loss: 0.0785 - val_accuracy: 0.9740 - lr: 1.0000e-05\n","Epoch 30/50\n","24/24 [==============================] - 64s 3s/step - loss: 0.0326 - accuracy: 0.9905 - val_loss: 0.0778 - val_accuracy: 0.9740 - lr: 1.0000e-05\n","Epoch 31/50\n","24/24 [==============================] - 61s 3s/step - loss: 0.0359 - accuracy: 0.9891 - val_loss: 0.0768 - val_accuracy: 0.9740 - lr: 1.0000e-05\n","Epoch 32/50\n","24/24 [==============================] - ETA: 0s - loss: 0.0430 - accuracy: 0.9837\n","Epoch 32: ReduceLROnPlateau reducing learning rate to 1.0000000656873453e-06.\n","24/24 [==============================] - 70s 3s/step - loss: 0.0430 - accuracy: 0.9837 - val_loss: 0.0759 - val_accuracy: 0.9740 - lr: 1.0000e-05\n","\n","Required time:  0:38:45.236354\n","\n"]}]},{"cell_type":"code","source":["def plot_performance(model_name, accuracy, val_accuracy, loss, val_loss):\n","  plt.figure(figsize=(10,5))\n","  plt.subplot(1,2,1)\n","  plt.plot(loss)\n","  plt.plot(val_loss)\n","  plt.title('{} : Loss'.format(model_name), fontsize=12, fontweight='bold')\n","  plt.ylabel('Loss')\n","  plt.xlabel('Epoch')\n","  plt.legend(['train', 'test'], loc='upper right')\n","\n","  plt.subplot(1,2,2)\n","  plt.plot(accuracy)\n","  plt.plot(val_accuracy)\n","  plt.title('{} : Accuracy'.format(model_name), fontsize=12, fontweight='bold')\n","  plt.ylabel('Accuracy')\n","  plt.xlabel('Epoch')\n","  plt.legend(['train', 'test'], loc='upper right')"],"metadata":{"id":"iMCy1E2uBuAg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plot_performance(model_name='EfficientNetV2-L',\n","                  accuracy=history.history['accuracy'],\n","                 val_accuracy=history.history['val_accuracy'],\n","                 loss=history.history['loss'],\n","                 val_loss=history.history['val_loss'])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"V0cM83MiCgPM","outputId":"8b169413-1bc1-4f57-d212-c19f5eca2395"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["test_steps = test_generator.samples // BATCH_SIZE\n","\n","test_loss, test_acc = trf_lr_efficientnet_model.evaluate(test_generator, steps=test_steps)\n","print('\\naccuracy:', test_acc, 'loss: ',test_loss)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1gHlxHICCjs7","outputId":"cc539451-c810-4d07-a8be-a1a26347b5e8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["6/6 [==============================] - 13s 2s/step - loss: 0.0759 - accuracy: 0.9740\n","\n","accuracy: 0.9739583134651184 loss:  0.07594507187604904\n"]}]},{"cell_type":"code","source":["predict = trf_lr_efficientnet_model.predict(test_generator, steps=test_steps)\n","y_hat = np.argmax(predict, axis=1)\n","y_hat[:20]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"e-2F-dRNClvD","outputId":"e60b31f2-1969-4538-f2c0-e880cbbae8dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["6/6 [==============================] - 14s 2s/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([1, 3, 0, 0, 2, 1, 0, 1, 2, 3, 0, 2, 2, 0, 0, 1, 0, 1, 1, 0])"]},"metadata":{},"execution_count":48}]},{"cell_type":"code","source":["test_labels_df = pd.DataFrame()\n","test_labels_df[['class']] = test_data[['class']]\n","\n","change = {\n","'0' : 0,\n","'1' : 1,\n","'2' : 2,\n","'3' : 3,\n","'4' : 4\n","}\n","\n","test_labels_df['class'] = test_labels_df['class'].map(change)\n","test_labels_df = test_labels_df[ : test_steps*BATCH_SIZE]\n","\n","\n","y_test = np.array(test_labels_df['class'])\n","y_test[:20]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qU6sh2R7CnfG","outputId":"a4d8ca23-473b-48bb-ba99-554689ea8a85"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 3, 0, 0, 2, 1, 0, 1, 2, 3, 0, 2, 2, 0, 0, 1, 0, 3, 1, 0])"]},"metadata":{},"execution_count":49}]},{"cell_type":"code","source":["print(classification_report(y_test, y_hat), '\\n')\n","cm = confusion_matrix(y_test, y_hat)\n","sns.heatmap(cm, annot=True, cmap=\"Blues\", fmt='.0f', cbar=False)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":656},"id":"qNDyqYkUCxC1","outputId":"4fe63336-e7af-4472-f7c1-28a7588054dd"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00       123\n","           1       0.91      0.97      0.94        32\n","           2       0.92      1.00      0.96        22\n","           3       1.00      0.73      0.85        15\n","\n","    accuracy                           0.97       192\n","   macro avg       0.96      0.93      0.94       192\n","weighted avg       0.98      0.97      0.97       192\n"," \n","\n"]},{"output_type":"execute_result","data":{"text/plain":["<Axes: >"]},"metadata":{},"execution_count":50},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["train_datagen = ImageDataGenerator(rescale=1./255,\n","                                    rotation_range=40,\n","                                    width_shift_range=0.2,\n","                                    height_shift_range=0.2,\n","                                    shear_range=0.2,\n","                                    zoom_range=0.2,\n","                                    horizontal_flip=True,\n","                                    fill_mode='nearest')\n","\n","train_generator = train_datagen.flow_from_dataframe(\n","                  train_data,\n","                  x_col=\"filename\",\n","                  y_col=\"class\",\n","                  target_size=(IM_HEIGHT, IM_WIDTH),\n","                  class_mode='categorical',\n","                  # batch_size= BATCH_SIZE,\n","                  color_mode='rgb',\n","                  shuffle=False,\n","                  num_parallel_calls=AUTOTUNE)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"psv307Edp5pH","outputId":"2379bacc-88c1-4ddd-cd5a-bd498e28d728"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Found 769 validated image filenames belonging to 4 classes.\n"]}]},{"cell_type":"code","source":["train_steps = train_generator.samples // BATCH_SIZE\n","\n","y_train_pred_proba = trf_lr_efficientnet_model.predict(train_generator)\n","y_train_pred = np.argmax(y_train_pred_proba, axis=1)\n","y_train_true = train_generator.classes"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NO4gYhFZp8Yq","outputId":"c519bc3f-b2aa-479c-cb09-abe4687de3ba"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["25/25 [==============================] - 56s 2s/step\n"]}]},{"cell_type":"code","source":["train_report = classification_report(y_train_true, y_train_pred)\n","print(\"Classification Report for Training Data:\")\n","print(train_report)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rGSBupkVqGVE","outputId":"3a34de9b-da01-4e81-a4d3-44f8ce4a864d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Classification Report for Training Data:\n","              precision    recall  f1-score   support\n","\n","           0       1.00      1.00      1.00       489\n","           1       0.97      0.99      0.98       130\n","           2       1.00      0.99      0.99        91\n","           3       0.98      0.95      0.97        59\n","\n","    accuracy                           0.99       769\n","   macro avg       0.99      0.98      0.99       769\n","weighted avg       0.99      0.99      0.99       769\n","\n"]}]}]}